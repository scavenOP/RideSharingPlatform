{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../UserVerification/api.service\";\nimport * as i4 from \"../app.tokenservice\";\nimport * as i5 from \"@angular/common\";\nfunction NavComponent_li_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 9)(1, \"a\", 13);\n    i0.ɵɵtext(2, \"New Application\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction NavComponent_ng_container_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"li\", 14)(2, \"span\", 15);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"li\")(5, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function NavComponent_ng_container_15_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.logout());\n    });\n    i0.ɵɵtext(6, \"Logout\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Welcome \", ctx_r1.currentUser, \"\");\n  }\n}\nfunction NavComponent_ng_container_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"li\", 9)(2, \"button\", 17);\n    i0.ɵɵtext(3, \"Login\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n}\nexport class NavComponent {\n  constructor(router, formBuilder, loginService, tokenservice) {\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.loginService = loginService;\n    this.tokenservice = tokenservice;\n    this.isLoading = false;\n    this.currentuserrole = null;\n  }\n  ngOnInit() {\n    console.log(\"user\" + this.currentuserrole);\n    this.loginService.unAuthorisedError.subscribe(() => {\n      this.currentUser = this.tokenservice.getname();\n      this.localservice = this.tokenservice;\n      this.currentuserrole = this.tokenservice.getRole();\n      console.log(\"user\" + this.currentuserrole);\n    });\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  isLoggedIn() {\n    var r = this.tokenservice.getToken() != null;\n    if (r == true) {\n      this.currentUser = this.tokenservice.getname();\n      //console.log(\"user\"+this.currentUser);\n    }\n\n    return r;\n  }\n  logout() {\n    this.tokenservice.logout();\n    this.router.navigate(['']);\n  }\n}\nNavComponent.ɵfac = function NavComponent_Factory(t) {\n  return new (t || NavComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ApiService), i0.ɵɵdirectiveInject(i4.TokenService));\n};\nNavComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NavComponent,\n  selectors: [[\"app-nav\"]],\n  decls: 17,\n  vars: 3,\n  consts: [[1, \"navbar\", \"navbar-expand-lg\", \"navbar-dark\", \"bg-dark\"], [\"href\", \"#\", 1, \"navbar-brand\"], [\"type\", \"button\", \"data-toggle\", \"collapse\", \"data-target\", \"#navbarNav\", \"aria-controls\", \"navbarNav\", \"aria-expanded\", \"false\", \"aria-label\", \"Toggle navigation\", 1, \"navbar-toggler\"], [1, \"navbar-toggler-icon\"], [\"id\", \"navbarNav\", 1, \"collapse\", \"navbar-collapse\"], [1, \"navbar-nav\", \"me-auto\", \"mb-2\", \"mb-lg-0\"], [1, \"nav-item\", \"active\"], [\"routerLink\", \"/\", 1, \"nav-link\"], [\"class\", \"nav-item\", 4, \"ngIf\"], [1, \"nav-item\"], [\"routerLink\", \"/add-vehicle\", 1, \"nav-link\"], [1, \"nav\", \"navbar-nav\", \"ml-auto\"], [4, \"ngIf\"], [\"routerLink\", \"/new-application\", 1, \"nav-link\"], [1, \"dropdown\"], [1, \"navbar-text\", \"mr-3\"], [\"href\", \"#\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"routerLink\", \"/login\", 1, \"btn\", \"btn-primary\"]],\n  template: function NavComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"nav\", 0)(1, \"a\", 1);\n      i0.ɵɵtext(2, \"RideSharingPlatform\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"button\", 2);\n      i0.ɵɵelement(4, \"span\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"ul\", 5)(7, \"li\", 6)(8, \"a\", 7);\n      i0.ɵɵtext(9, \"Home\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(10, NavComponent_li_10_Template, 3, 0, \"li\", 8);\n      i0.ɵɵelementStart(11, \"li\", 9)(12, \"a\", 10);\n      i0.ɵɵtext(13, \"Add Vehicle\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(14, \"ul\", 11);\n      i0.ɵɵtemplate(15, NavComponent_ng_container_15_Template, 7, 1, \"ng-container\", 12);\n      i0.ɵɵtemplate(16, NavComponent_ng_container_16_Template, 4, 0, \"ng-container\", 12);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngIf\", ctx.currentuserrole == null);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoggedIn());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isLoggedIn());\n    }\n  },\n  dependencies: [i5.NgIf, i1.RouterLink],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nNavComponent.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NavComponent,\n  factory: NavComponent.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;;ICU3DC,6BAAmD;IACCA,+BAAe;IAAAA,iBAAI;;;;;;IAiBvEA,6BAAmC;IACjCA,8BAAsB;IAEcA,YAAyB;IAAAA,iBAAO;IAEhEA,0BAAI;IAAgCA;MAAAA;MAAA;MAAA,OAASA,8BAAQ;IAAA,EAAC;IAAUA,sBAAM;IAAAA,iBAAS;IAGrFA,0BAAe;;;;IALuBA,eAAyB;IAAzBA,yDAAyB;;;;;IAM/DA,6BAAoC;IACpCA,6BAAqB;IACiCA,qBAAK;IAAAA,iBAAS;IAEtEA,0BAAe;;;AD5BrB,OAAM,MAAOC,YAAY;EAQvBC,YAAoBC,MAAc,EAASC,WAAwB,EAAUC,YAAwB,EAASC,YAA0B;IAApH,WAAM,GAANH,MAAM;IAAiB,gBAAW,GAAXC,WAAW;IAAuB,iBAAY,GAAZC,YAAY;IAAqB,iBAAY,GAAZC,YAAY;IAJ1H,cAAS,GAAC,KAAK;IACf,oBAAe,GAAQ,IAAI;EAGiH;EAE5IC,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,MAAM,GAAC,IAAI,CAACC,eAAe,CAAC;IAExC,IAAI,CAACL,YAAY,CAACM,iBAAiB,CAACC,SAAS,CAAC,MAAI;MAChD,IAAI,CAACC,WAAW,GAAC,IAAI,CAACP,YAAY,CAACQ,OAAO,EAAE;MAC5C,IAAI,CAACC,YAAY,GAAC,IAAI,CAACT,YAAY;MACnC,IAAI,CAACI,eAAe,GAAC,IAAI,CAACJ,YAAY,CAACU,OAAO,EAAE;MAChDR,OAAO,CAACC,GAAG,CAAC,MAAM,GAAC,IAAI,CAACC,eAAe,CAAC;IAG1C,CAAC,CAAC;IACF,IAAI,CAACO,SAAS,GAAG,IAAI,CAACb,WAAW,CAACc,KAAK,CAAC;MACtCC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACpB,UAAU,CAACqB,QAAQ,EAAErB,UAAU,CAACoB,KAAK,CAAC,CAAC;MACpDE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACtB,UAAU,CAACqB,QAAQ,EAAErB,UAAU,CAACuB,SAAS,CAAC,CAAC,CAAC,CAAC;KAC9D,CAAC;EAEJ;EAEAC,UAAU;IACR,IAAIC,CAAC,GAAE,IAAI,CAAClB,YAAY,CAACmB,QAAQ,EAAE,IAAI,IAAI;IAC3C,IAAGD,CAAC,IAAE,IAAI,EAAC;MACX,IAAI,CAACX,WAAW,GAAC,IAAI,CAACP,YAAY,CAACQ,OAAO,EAAE;MAE1C;;;IAEA,OAAOU,CAAC;EACZ;EACAE,MAAM;IACJ,IAAI,CAACpB,YAAY,CAACoB,MAAM,EAAE;IAC1B,IAAI,CAACvB,MAAM,CAACwB,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;EAC5B;;AAxCW1B,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAA2B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCdzBhC,8BAAyD;MACpBA,mCAAmB;MAAAA,iBAAI;MACxDA,iCAA4K;MAC1KA,0BAAyC;MAC3CA,iBAAS;MACTA,8BAAqD;MAGZA,oBAAI;MAAAA,iBAAI;MAG7CA,6DAEK;MAWLA,8BAAsB;MAC0BA,4BAAW;MAAAA,iBAAI;MAGjEA,+BAAmC;MACjCA,kFAQe;MACfA,kFAIa;MACfA,iBAAK;;;MAhCmBA,gBAA2B;MAA3BA,kDAA2B;MAkBlCA,eAAkB;MAAlBA,uCAAkB;MASlBA,eAAmB;MAAnBA,wCAAmB;;;;;;ADxB7BC,YAAY;SAAZA,YAAY;EAAAgC,SAAZhC,YAAY;EAAAiC,YAPX;AAAM","names":["Validators","i0","NavComponent","constructor","router","formBuilder","loginService","tokenservice","ngOnInit","console","log","currentuserrole","unAuthorisedError","subscribe","currentUser","getname","localservice","getRole","loginForm","group","email","required","password","minLength","isLoggedIn","r","getToken","logout","navigate","selectors","decls","vars","consts","template","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\acer pc\\Documents\\GitHub\\RideSharingPlatform\\Frontend\\ridesharingplatform\\src\\app\\nav\\nav.component.ts","C:\\Users\\acer pc\\Documents\\GitHub\\RideSharingPlatform\\Frontend\\ridesharingplatform\\src\\app\\nav\\nav.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ApiService } from '../UserVerification/api.service';\r\nimport { EventEmitter, Injectable } from '@angular/core';\r\nimport { TokenService } from '../app.tokenservice';\r\nimport { Router } from '@angular/router';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n@Component({\r\n  selector: 'app-nav',\r\n  templateUrl: './nav.component.html',\r\n  styleUrls: ['./nav.component.scss']\r\n})\r\nexport class NavComponent implements OnInit{\r\n  loginForm: FormGroup;\r\n  errorMessage: string;\r\n  currentUser: string;\r\n  isLoading=false;\r\n  currentuserrole:string=null;\r\n  localservice:TokenService;\r\n\r\n  constructor(private router: Router,private formBuilder: FormBuilder, private loginService: ApiService,private tokenservice: TokenService) { }\r\n\r\n  ngOnInit() {\r\n    console.log(\"user\"+this.currentuserrole);\r\n    \r\n    this.loginService.unAuthorisedError.subscribe(()=>{\r\n      this.currentUser=this.tokenservice.getname();\r\n      this.localservice=this.tokenservice;\r\n      this.currentuserrole=this.tokenservice.getRole();\r\n      console.log(\"user\"+this.currentuserrole);\r\n      \r\n      \r\n    })\r\n    this.loginForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]]\r\n    });\r\n    \r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    var r =this.tokenservice.getToken() != null;\r\n    if(r==true){\r\n    this.currentUser=this.tokenservice.getname();\r\n      \r\n      //console.log(\"user\"+this.currentUser);\r\n      }\r\n      return r;\r\n  }\r\n  logout(): void {\r\n    this.tokenservice.logout();\r\n    this.router.navigate([''])\r\n  }\r\n  // onSubmit() {\r\n  //   this.isLoading=true;\r\n  //   const email = this.loginForm.controls['email'].value;\r\n  //   const password = this.loginForm.controls['password'].value;\r\n  //   this.loginService.login(email, password).subscribe(\r\n  //     response => {\r\n  //       // localStorage.setItem('token', response.token);\r\n  //       // localStorage.setItem('username', response.name);\r\n  //       // close the modal on successful login\r\n  //       console.log(response.token);\r\n  //       this.tokenservice.setname(response.name);\r\n  //       this.tokenservice.setToken(response.token);\r\n  //       this.tokenservice.setRole(response.role;\r\n  //       this.currentUser=this.tokenservice.getname();\r\n  //       document.getElementById('closeModal').click();\r\n  //       this.isLoading=false;\r\n  //     },\r\n  //     error => {\r\n  //       this.errorMessage = error.message;\r\n  //       console.log(error);\r\n  //       this.isLoading=false;\r\n  //     }\r\n  //   );\r\n  }\r\n\r\n\r\n\r\n","<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n    <a class=\"navbar-brand\" href=\"#\">RideSharingPlatform</a>\r\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n      <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li class=\"nav-item active\">\r\n          <a class=\"nav-link\" routerLink=\"/\">Home</a>\r\n        </li>\r\n        \r\n        <li class=\"nav-item\" *ngIf=\"currentuserrole==null\">\r\n          <a class=\"nav-link\" routerLink=\"/new-application\">New Application</a>\r\n        </li>\r\n        \r\n        <!-- <li class=\"nav-item dropdown\">\r\n          <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n            User Verification\r\n          </a>\r\n          <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n            <a class=\"dropdown-item\" routerLink=\"/new-application\">New Application</a>\r\n            <a class=\"dropdown-item\" routerLink=\"/application-request\">Pending Application Requests</a>\r\n            </div>\r\n        </li> -->\r\n        <li class=\"nav-item\" >\r\n          <a class=\"nav-link\" routerLink=\"/add-vehicle\">Add Vehicle</a>\r\n        </li>\r\n      </ul>\r\n      <ul class=\"nav navbar-nav ml-auto\">\r\n        <ng-container *ngIf=\"isLoggedIn()\">\r\n          <li class=\" dropdown\">\r\n            \r\n               <span class=\"navbar-text mr-3\">Welcome {{ currentUser }}</span>\r\n            \r\n              <li><button class=\"btn btn-primary\" (click)=\"logout()\" href=\"#\">Logout</button></li>\r\n            \r\n          \r\n        </ng-container>\r\n        <ng-container *ngIf=\"!isLoggedIn()\">\r\n        <li class=\"nav-item\">\r\n          <button class=\"btn btn-primary\" routerLink=\"/login\">Login</button>\r\n        </li>\r\n      </ng-container>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n  <!-- <div class=\"modal fade\" id=\"loginModal\" tabindex=\"-1\" aria-labelledby=\"loginModalLabel\" aria-hidden=\"true\">\r\n    <div class=\"modal-dialog\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\" id=\"loginModalLabel\">Login</h5>\r\n          <button type=\"button\" id=\"closeModal\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"mb-3\">\r\n              <label for=\"emailInput\" class=\"form-label\">Email address</label>\r\n              <input type=\"email\" class=\"form-control\" id=\"emailInput\" formControlName=\"email\" placeholder=\"Enter email\" required>\r\n            </div>\r\n            <div class=\"mb-3\">\r\n              <label for=\"passwordInput\" class=\"form-label\">Password</label>\r\n              <input type=\"password\" class=\"form-control\" id=\"passwordInput\" formControlName=\"password\" placeholder=\"Password\"  required>\r\n            </div>\r\n            <div *ngIf=\"errorMessage\" class=\"text-danger\">{{ errorMessage }}</div>\r\n\r\n            <button type=\"submit\" [disabled]=\"isLoading\" class=\"btn btn-primary\">\r\n              <span *ngIf=\"isLoading\"  class=\"spinner-border spinner-border-sm mr-1\"></span>   Login</button>\r\n            \r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div> -->\r\n  \r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}