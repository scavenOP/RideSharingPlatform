{"ast":null,"code":"import { FormGroup, FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"./api.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction NewapplicationComponent_option_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 20);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const company_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", company_r1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(company_r1);\n  }\n}\nexport class NewapplicationComponent {\n  constructor(formBuilder, dataService, router) {\n    this.formBuilder = formBuilder;\n    this.dataService = dataService;\n    this.router = router;\n    this.companyList = [];\n    this.roleList = [{\n      name: 'Motorist',\n      value: 'MOTORIST'\n    }, {\n      name: 'Rider',\n      value: 'RIDER'\n    }];\n  }\n  ngOnInit() {\n    // Initialize the form with required fields and validators\n    this.applicationForm = new FormGroup({\n      name: new FormControl(),\n      lastName: new FormControl(),\n      email: new FormControl(),\n      phoneNumber: new FormControl(),\n      role: new FormControl(),\n      licenseNumber: new FormControl(),\n      company: new FormControl()\n    });\n    // Fetch the list of companies from the API\n    this.dataService.getCompanies().subscribe(response => {\n      this.companyList = response.map(company => company.companyName);\n    });\n  }\n  // Handler for form submission\n  onSubmit() {\n    // Check if the form is valid\n    if (this.applicationForm.invalid) {\n      return;\n    }\n    // Send the application data to the API\n    this.dataService.createApplication(this.applicationForm.value).subscribe(response => {\n      // Redirect to acknowledgement page\n      this.router.navigateByUrl('/acknowledgement');\n    });\n  }\n}\nNewapplicationComponent.ɵfac = function NewapplicationComponent_Factory(t) {\n  return new (t || NewapplicationComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService), i0.ɵɵdirectiveInject(i3.Router));\n};\nNewapplicationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NewapplicationComponent,\n  selectors: [[\"app-newapplication\"]],\n  decls: 42,\n  vars: 3,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"name\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"phone\"], [\"type\", \"tel\", \"id\", \"phone\", \"formControlName\", \"phoneNumber\", 1, \"form-control\"], [\"for\", \"role\"], [\"type\", \"radio\", \"name\", \"role\", \"value\", \"motorist\", \"formControlName\", \"role\"], [\"type\", \"radio\", \"name\", \"role\", \"value\", \"rider\", \"formControlName\", \"role\"], [\"for\", \"company\"], [\"id\", \"company\", \"formControlName\", \"company\", 1, \"form-control\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"licenseNumber\"], [\"type\", \"text\", \"id\", \"licenseNumber\", \"formControlName\", \"licenseNumber\", 1, \"form-control\"], [\"for\", \"vehicleType\"], [\"type\", \"text\", \"id\", \"vehicleType\", \"formControlName\", \"vehicleType\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [3, \"value\"]],\n  template: function NewapplicationComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"New Application\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function NewapplicationComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n      i0.ɵɵtext(5, \"Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 1)(8, \"label\", 4);\n      i0.ɵɵtext(9, \"Email:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 1)(12, \"label\", 6);\n      i0.ɵɵtext(13, \"Phone:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 1)(16, \"label\", 8);\n      i0.ɵɵtext(17, \"Role:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"div\")(19, \"label\");\n      i0.ɵɵelement(20, \"input\", 9);\n      i0.ɵɵtext(21, \" Motorist\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"label\");\n      i0.ɵɵelement(23, \"input\", 10);\n      i0.ɵɵtext(24, \" Rider\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(25, \"div\", 1)(26, \"label\", 11);\n      i0.ɵɵtext(27, \"Company:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"select\", 12)(29, \"option\", 13);\n      i0.ɵɵtext(30, \"Select a company\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(31, NewapplicationComponent_option_31_Template, 2, 2, \"option\", 14);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(32, \"div\", 1)(33, \"label\", 15);\n      i0.ɵɵtext(34, \"License Number:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(35, \"input\", 16);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(36, \"div\", 1)(37, \"label\", 17);\n      i0.ɵɵtext(38, \"Vehicle Type:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(39, \"input\", 18);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(40, \"button\", 19);\n      i0.ɵɵtext(41, \"Submit\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.applicationForm);\n      i0.ɵɵadvance(29);\n      i0.ɵɵproperty(\"ngForOf\", ctx.companyList);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"disabled\", ctx.applicationForm.invalid);\n    }\n  },\n  dependencies: [i4.NgForOf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.RadioControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","FormControl","i0","NewapplicationComponent","constructor","formBuilder","dataService","router","name","value","ngOnInit","applicationForm","lastName","email","phoneNumber","role","licenseNumber","company","getCompanies","subscribe","response","companyList","map","companyName","onSubmit","invalid","createApplication","navigateByUrl","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\projects\\ridesharingplatform\\RideSharingPlatform\\Frontend\\ridesharingplatform\\src\\app\\UserVerification\\newapplication\\newapplication.component.ts","D:\\projects\\ridesharingplatform\\RideSharingPlatform\\Frontend\\ridesharingplatform\\src\\app\\UserVerification\\newapplication\\newapplication.component.html"],"sourcesContent":["\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup,FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ApiService } from './api.service';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-newapplication',\n  templateUrl: './newapplication.component.html',\n  styleUrls: ['./newapplication.component.scss']\n})\nexport class NewapplicationComponent implements OnInit {\n\n  applicationForm!: FormGroup ;\n  companyList: any[]=[];\n  roleList: any[] = [\n    { name: 'Motorist', value: 'MOTORIST' },\n    { name: 'Rider', value: 'RIDER' }\n  ];\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private dataService: ApiService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    // Initialize the form with required fields and validators\n    this.applicationForm =new FormGroup({\n      name: new FormControl(),\n      lastName: new FormControl(),\n      email: new FormControl(),\n      phoneNumber: new FormControl(),\n      role: new FormControl(),\n      licenseNumber:new FormControl(),\n      company: new FormControl()\n    });\n\n    // Fetch the list of companies from the API\n    this.dataService.getCompanies().subscribe((response: any[]) => {\n    \n      \n      this.companyList = response.map(company => company.companyName);\n      \n    });\n  }\n\n  // Handler for form submission\n  onSubmit() {\n    // Check if the form is valid\n    if (this.applicationForm.invalid) {\n      return;\n    }\n\n    // Send the application data to the API\n    this.dataService.createApplication(this.applicationForm.value).subscribe((response: any) => {\n      // Redirect to acknowledgement page\n      this.router.navigateByUrl('/acknowledgement');\n    });\n  }\n\n}\n","<h2>New Application</h2>\n<!-- <div *ngIf=\"errorMessage\" class=\"alert alert-danger\">{{ errorMessage }}</div> -->\n<form [formGroup]=\"applicationForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"form-group\">\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" class=\"form-control\" id=\"name\" formControlName=\"name\" required>\n    \n  </div>\n  <div class=\"form-group\">\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" class=\"form-control\" id=\"email\" formControlName=\"email\" required>\n    \n  </div>\n  <div class=\"form-group\">\n    <label for=\"phone\">Phone:</label>\n    <input type=\"tel\" class=\"form-control\" id=\"phone\" formControlName=\"phoneNumber\">\n    <!-- <div *ngIf=\"applicationForm.get('phone').invalid && (applicationForm.get('phone').dirty || applicationForm.get('phone').touched)\"\n         class=\"alert alert-danger\">\n      <div *ngIf=\"applicationForm.get('phone').errors.required\">\n        Phone is required.\n      </div>\n      <div *ngIf=\"applicationForm.get('phone').errors.pattern\">\n        Please enter a valid phone number.\n      </div>\n    </div> -->\n  </div>\n  <div class=\"form-group\">\n    <label for=\"role\">Role:</label>\n    <div>\n      <label><input type=\"radio\" name=\"role\" value=\"motorist\" formControlName=\"role\"> Motorist</label>\n      <label><input type=\"radio\" name=\"role\" value=\"rider\" formControlName=\"role\"> Rider</label>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"company\">Company:</label>\n    <select class=\"form-control\" id=\"company\" formControlName=\"company\">\n      <option value=\"\">Select a company</option>\n      <option *ngFor=\"let company of companyList\" [value]=\"company\">{{ company }}</option>\n    </select>\n    <!-- <div *ngIf=\"applicationForm.get('company').invalid && (applicationForm.get('company').dirty || applicationForm.get('company').touched)\"\n         class=\"alert alert-danger\">\n      <div *ngIf=\"applicationForm.get('company').errors.required\">\n        Company is required.\n      </div>\n    </div> -->\n  </div>\n  <div class=\"form-group\">\n    <label for=\"licenseNumber\">License Number:</label>\n    <input type=\"text\" class=\"form-control\" id=\"licenseNumber\" formControlName=\"licenseNumber\">\n</div>\n<div class=\"form-group\" >\n    <label for=\"vehicleType\">Vehicle Type:</label>\n    <input type=\"text\" class=\"form-control\" id=\"vehicleType\" formControlName=\"vehicleType\">\n    <!-- <div *ngIf=\"applicationForm.get('vehicleType').invalid && (applicationForm.get('vehicleType').dirty || applicationForm.get('vehicleType').touched)\"\n         class=\"alert alert-danger\">\n      <div *ngIf=\"applicationForm.get('vehicleType').errors.required\">\n        Vehicle type is required.\n      </div>\n    </div> -->\n  </div>\n  <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"applicationForm.invalid\">Submit</button>\n</form>\n    \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}