{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../RideApi.service\";\nimport * as i3 from \"src/app/app.tokenservice\";\nexport class ScheduleRideComponent {\n  constructor(formBuilder, apiService, tokenService) {\n    this.formBuilder = formBuilder;\n    this.apiService = apiService;\n    this.tokenService = tokenService;\n    this.distances = [];\n    this.isLoading = false;\n  }\n  ngOnInit() {\n    this.isLoading = true;\n    {\n      this.apiService.getdistances().subscribe(response => {\n        this.distances = response;\n        //console.log(this.tokenService.getToken());\n      });\n\n      this.newride = new FormGroup({\n        rideFrom: new FormControl('', Validators.required),\n        rideTo: new FormControl('', Validators.required),\n        rideStartsOn: new FormControl(new Date(), Validators.required),\n        rideTime: new FormControl(Validators.required),\n        vehicleRegistrationNo: new FormControl('', Validators.required),\n        motoristUserId: new FormControl(this.tokenService.getid(), Validators.required),\n        noOfSeatsAvailable: new FormControl(Validators.required)\n      });\n    }\n    this.isLoading = false;\n  }\n}\nScheduleRideComponent.ɵfac = function ScheduleRideComponent_Factory(t) {\n  return new (t || ScheduleRideComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService), i0.ɵɵdirectiveInject(i3.TokenService));\n};\nScheduleRideComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ScheduleRideComponent,\n  selectors: [[\"app-schedule-ride\"]],\n  decls: 2,\n  vars: 0,\n  template: function ScheduleRideComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"schedule-ride works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAEA,SAAsBA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;;AAQhF,OAAM,MAAOC,qBAAqB;EAOhCC,YAAoBC,WAAwB,EAASC,UAAqB,EAASC,YAAyB;IAAxF,gBAAW,GAAXF,WAAW;IAAsB,eAAU,GAAVC,UAAU;IAAoB,iBAAY,GAAZC,YAAY;IAL/F,cAAS,GAAS,EAAE;IACpB,cAAS,GAAS,KAAK;EAIuF;EAE9GC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAC,IAAI;IACvB;MACI,IAAI,CAACH,UAAU,CAACI,YAAY,EAAE,CAACC,SAAS,CAAEC,QAAe,IAAI;QAG3D,IAAI,CAACC,SAAS,GAAGD,QAAQ;QAEzB;MAEF,CAAC,CAAC;;MAEF,IAAI,CAACE,OAAO,GAAE,IAAIb,SAAS,CAAC;QAC1Bc,QAAQ,EAAE,IAAIf,WAAW,CAAC,EAAE,EAACE,UAAU,CAACc,QAAQ,CAAC;QACjDC,MAAM,EAAC,IAAIjB,WAAW,CAAC,EAAE,EAACE,UAAU,CAACc,QAAQ,CAAC;QAC9CE,YAAY,EAAC,IAAIlB,WAAW,CAAC,IAAImB,IAAI,EAAE,EAACjB,UAAU,CAACc,QAAQ,CAAC;QAC5DI,QAAQ,EAAC,IAAIpB,WAAW,CAACE,UAAU,CAACc,QAAQ,CAAC;QAC7CK,qBAAqB,EAAC,IAAIrB,WAAW,CAAC,EAAE,EAACE,UAAU,CAACc,QAAQ,CAAC;QAC7DM,cAAc,EAAC,IAAItB,WAAW,CAAC,IAAI,CAACO,YAAY,CAACgB,KAAK,EAAE,EAACrB,UAAU,CAACc,QAAQ,CAAC;QAC7EQ,kBAAkB,EAAC,IAAIxB,WAAW,CAACE,UAAU,CAACc,QAAQ;OAIvD,CAAC;;IAEF,IAAI,CAACP,SAAS,GAAC,KAAK;EACtB;;AAnCWN,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;QAArBA,qBAAqB;EAAAsB;EAAAC;EAAAC;EAAAC;IAAA;MCVlCC,yBAAG;MAAAA,oCAAoB;MAAAA,iBAAI","names":["FormControl","FormGroup","Validators","ScheduleRideComponent","constructor","formBuilder","apiService","tokenService","ngOnInit","isLoading","getdistances","subscribe","response","distances","newride","rideFrom","required","rideTo","rideStartsOn","Date","rideTime","vehicleRegistrationNo","motoristUserId","getid","noOfSeatsAvailable","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\acer pc\\Documents\\GitHub\\RideSharingPlatform\\Frontend\\ridesharingplatform\\src\\app\\RideManagement\\schedule-ride\\schedule-ride.component.ts","C:\\Users\\acer pc\\Documents\\GitHub\\RideSharingPlatform\\Frontend\\ridesharingplatform\\src\\app\\RideManagement\\schedule-ride\\schedule-ride.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ApiService } from '../RideApi.service';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { TokenService } from 'src/app/app.tokenservice';\n\n@Component({\n  selector: 'app-schedule-ride',\n  templateUrl: './schedule-ride.component.html',\n  styleUrls: ['./schedule-ride.component.scss']\n})\nexport class ScheduleRideComponent implements OnInit{\n\n  distances:any[] = [];\n  isLoading:boolean=false;\n  newride: FormGroup ;\n\n\n  constructor(private formBuilder: FormBuilder,private apiService:ApiService,private tokenService:TokenService){}\n\n  ngOnInit(): void {\n    this.isLoading=true;\n{\n    this.apiService.getdistances().subscribe((response: any[]) => {\n    \n      \n      this.distances = response;\n      \n      //console.log(this.tokenService.getToken());\n      \n    });\n\n    this.newride= new FormGroup({\n      rideFrom :new FormControl('',Validators.required),\n      rideTo:new FormControl('',Validators.required),\n      rideStartsOn:new FormControl(new Date(),Validators.required),\n      rideTime:new FormControl(Validators.required),\n      vehicleRegistrationNo:new FormControl('',Validators.required),\n      motoristUserId:new FormControl(this.tokenService.getid(),Validators.required),\n      noOfSeatsAvailable:new FormControl(Validators.required)\n\n\n\n    });\n    }\n    this.isLoading=false;\n  }\n\n  \n\n}\n","<p>schedule-ride works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}