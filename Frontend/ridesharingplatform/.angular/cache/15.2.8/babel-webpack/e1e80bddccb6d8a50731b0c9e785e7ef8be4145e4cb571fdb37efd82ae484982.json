{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../UserVerification/api.service\";\nimport * as i4 from \"../app.tokenservice\";\nimport * as i5 from \"../nav/nav.component\";\nimport * as i6 from \"@angular/common\";\nfunction LoginComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nfunction LoginComponent_span_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 14);\n  }\n}\nexport class LoginComponent {\n  constructor(router, formBuilder, loginService, tokenservice, navComponent) {\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.loginService = loginService;\n    this.tokenservice = tokenservice;\n    this.navComponent = navComponent;\n  }\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  onSubmit() {\n    this.isLoading = true;\n    const email = this.loginForm.controls['email'].value;\n    const password = this.loginForm.controls['password'].value;\n    this.loginService.login(email, password).subscribe(response => {\n      // localStorage.setItem('token', response.token);\n      // localStorage.setItem('username', response.name);\n      // close the modal on successful login\n      console.log(response.token);\n      this.tokenservice.setname(response.name);\n      this.tokenservice.setToken(response.token);\n      this.tokenservice.setRole(response.role);\n      console.log(this.tokenservice.getname());\n      this.navComponent.currentUser = this.tokenservice.getname();\n      //document.getElementById('closeModal').click();\n      this.isLoading = false;\n      this.router.navigate(['']);\n    }, error => {\n      this.errorMessage = error.message;\n      console.log(error);\n      this.isLoading = false;\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ApiService), i0.ɵɵdirectiveInject(i4.TokenService), i0.ɵɵdirectiveInject(i5.NavComponent));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 18,\n  vars: 4,\n  consts: [[1, \"modal-header\"], [\"id\", \"loginModalLabel\", 1, \"modal-title\"], [\"type\", \"button\", \"id\", \"closeModal\", \"data-bs-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"btn-close\"], [1, \"modal-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"emailInput\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"emailInput\", \"formControlName\", \"email\", \"placeholder\", \"Enter email\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"passwordInput\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"passwordInput\", \"formControlName\", \"password\", \"placeholder\", \"Password\", \"required\", \"\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm mr-1\", 4, \"ngIf\"], [1, \"text-danger\"], [1, \"spinner-border\", \"spinner-border-sm\", \"mr-1\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h5\", 1);\n      i0.ɵɵtext(2, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"button\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"form\", 4);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 6);\n      i0.ɵɵtext(8, \"Email address\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 5)(11, \"label\", 8);\n      i0.ɵɵtext(12, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(14, LoginComponent_div_14_Template, 2, 1, \"div\", 10);\n      i0.ɵɵelementStart(15, \"button\", 11);\n      i0.ɵɵtemplate(16, LoginComponent_span_16_Template, 1, 0, \"span\", 12);\n      i0.ɵɵtext(17, \" Login\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.isLoading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n    }\n  },\n  dependencies: [i6.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"form[_ngcontent-%COMP%] {\\n  min-width: 300px;\\n  max-width: 400px;\\n  padding: 20px;\\n  margin: 0 auto;\\n  background: #70e1f5;\\n  background: linear-gradient(to right, #ffd194, #70e1f5);\\n  box-shadow: 3px 3px 23px -9px rgba(0, 0, 0, 0.86);\\n}\\n\\nform[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\n  border: 1px solid #eee;\\n  border-radius: 0 !important;\\n  padding: 5px 8px;\\n  color: #444;\\n}\\n\\nform[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n  margin-top: 20px;\\n}\\n\\n.pull-right[_ngcontent-%COMP%] {\\n  float: right;\\n}\\n\\n.cont[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 0px;\\n  right: 0px;\\n  bottom: 0px;\\n  left: 0px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxnQkFBQTtFQUNBLGdCQUFBO0VBQ0EsYUFBQTtFQUNBLGNBQUE7RUFDQSxtQkFBQTtFQUVGLHVEQUFBO0VBR0UsaURBQUE7QUFDSjs7QUFFRTtFQUNFLHNCQUFBO0VBQ0EsMkJBQUE7RUFDQSxnQkFBQTtFQUNBLFdBQUE7QUFDSjs7QUFFRTtFQUNFLGdCQUFBO0FBQ0o7O0FBSUU7RUFDRSxZQUFBO0FBREo7O0FBR0U7RUFDRSxrQkFBQTtFQUNBLFFBQUE7RUFDQSxVQUFBO0VBQ0EsV0FBQTtFQUNBLFNBQUE7QUFBSiIsInNvdXJjZXNDb250ZW50IjpbImZvcm0ge1xyXG4gICAgbWluLXdpZHRoOjMwMHB4O1xyXG4gICAgbWF4LXdpZHRoOjQwMHB4O1xyXG4gICAgcGFkZGluZzoyMHB4O1xyXG4gICAgbWFyZ2luOjAgYXV0bztcclxuICAgIGJhY2tncm91bmQ6ICM3MGUxZjU7XHJcbiAgYmFja2dyb3VuZDogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNmZmQxOTQsICM3MGUxZjUpOyAgXHJcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjZmZkMTk0LCAjNzBlMWY1KTtcclxuICAgIC13ZWJraXQtYm94LXNoYWRvdzogM3B4IDNweCAyM3B4IC05cHggcmdiYSgwLDAsMCwwLjg2KTtcclxuICAgIC1tb3otYm94LXNoYWRvdzogM3B4IDNweCAyM3B4IC05cHggcmdiYSgwLDAsMCwwLjg2KTtcclxuICAgIGJveC1zaGFkb3c6IDNweCAzcHggMjNweCAtOXB4IHJnYmEoMCwwLDAsMC44Nik7XHJcbiAgfVxyXG4gIFxyXG4gIGZvcm0gaW5wdXQge1xyXG4gICAgYm9yZGVyOjFweCBzb2xpZCAjZWVlO1xyXG4gICAgYm9yZGVyLXJhZGl1czowICFpbXBvcnRhbnQ7XHJcbiAgICBwYWRkaW5nOjVweCA4cHg7XHJcbiAgICBjb2xvcjojNDQ0O1xyXG4gIH1cclxuICBcclxuICBmb3JtIGJ1dHRvbiB7XHJcbiAgICBtYXJnaW4tdG9wOjIwcHg7XHJcbiAgfVxyXG4gIFxyXG4gIFxyXG4gIFxyXG4gIC5wdWxsLXJpZ2h0IHtcclxuICAgIGZsb2F0OnJpZ2h0O1xyXG4gIH1cclxuICAuY29udHtcclxuICAgIHBvc2l0aW9uOmFic29sdXRlO1xyXG4gICAgdG9wOjBweDtcclxuICAgIHJpZ2h0OjBweDtcclxuICAgIGJvdHRvbTowcHg7XHJcbiAgICBsZWZ0OjBweDtcclxuICAgIFxyXG4gIH0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","LoginComponent","constructor","router","formBuilder","loginService","tokenservice","navComponent","ngOnInit","loginForm","group","email","required","password","minLength","onSubmit","isLoading","controls","value","login","subscribe","response","console","log","token","setname","name","setToken","setRole","role","getname","currentUser","navigate","error","errorMessage","message","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\RideSharingPlatform\\RideSharingPlatform-main\\Frontend\\ridesharingplatform\\src\\app\\login\\login.component.ts","C:\\RideSharingPlatform\\RideSharingPlatform-main\\Frontend\\ridesharingplatform\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { TokenService } from '../app.tokenservice';\nimport { NavComponent } from '../nav/nav.component';\nimport { ApiService } from '../UserVerification/api.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit{\n  \n  loginForm: FormGroup;\n  //formBuilder: any;\n  isLoading:boolean;\n  errorMessage:string;\n  constructor(private router: Router,private formBuilder: FormBuilder,private loginService: ApiService,private tokenservice: TokenService,private navComponent: NavComponent){}\n  ngOnInit(): void {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  onSubmit() {\n    this.isLoading=true;\n    const email = this.loginForm.controls['email'].value;\n    const password = this.loginForm.controls['password'].value;\n    this.loginService.login(email, password).subscribe(\n      response => {\n        // localStorage.setItem('token', response.token);\n        // localStorage.setItem('username', response.name);\n        // close the modal on successful login\n        console.log(response.token);\n        this.tokenservice.setname(response.name);\n        this.tokenservice.setToken(response.token);\n        this.tokenservice.setRole(response.role);\n        console.log(this.tokenservice.getname());\n        this.navComponent.currentUser=this.tokenservice.getname();\n        //document.getElementById('closeModal').click();\n        this.isLoading=false;\n        this.router.navigate([''])\n      },\n      error => {\n        this.errorMessage = error.message;\n        console.log(error);\n        this.isLoading=false;\n      }\n    );\n  }\n\n\n}\n","<div class=\"modal-header\">\n    <h5 class=\"modal-title\" id=\"loginModalLabel\">Login</h5>\n    <button type=\"button\" id=\"closeModal\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n  </div>\n  <div class=\"modal-body\">\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"mb-3\">\n        <label for=\"emailInput\" class=\"form-label\">Email address</label>\n        <input type=\"email\" class=\"form-control\" id=\"emailInput\" formControlName=\"email\" placeholder=\"Enter email\" required>\n      </div>\n      <div class=\"mb-3\">\n        <label for=\"passwordInput\" class=\"form-label\">Password</label>\n        <input type=\"password\" class=\"form-control\" id=\"passwordInput\" formControlName=\"password\" placeholder=\"Password\"  required>\n      </div>\n      <div *ngIf=\"errorMessage\" class=\"text-danger\">{{ errorMessage }}</div>\n\n      <button type=\"submit\" [disabled]=\"isLoading\" class=\"btn btn-primary\">\n        <span *ngIf=\"isLoading\"  class=\"spinner-border spinner-border-sm mr-1\"></span>   Login</button>\n      \n    </form>\n    </div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}