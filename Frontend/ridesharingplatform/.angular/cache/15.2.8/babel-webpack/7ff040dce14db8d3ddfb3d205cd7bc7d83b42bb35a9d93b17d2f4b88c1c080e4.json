{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"./api.service\";\nimport * as i3 from \"@angular/router\";\nexport class NewApplicationComponent {\n  constructor(formBuilder, dataService, router) {\n    this.formBuilder = formBuilder;\n    this.dataService = dataService;\n    this.router = router;\n    this.companyList = [];\n    this.roleList = [{\n      name: 'Motorist',\n      value: 'MOTORIST'\n    }, {\n      name: 'Rider',\n      value: 'RIDER'\n    }];\n  }\n  ngOnInit() {\n    // Initialize the form with required fields and validators\n    this.applicationForm = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      phoneNumber: ['', Validators.required],\n      role: ['', Validators.required],\n      licenseNumber: [''],\n      company: ['', Validators.required]\n    });\n    // Fetch the list of companies from the API\n    this.dataService.getCompanies().subscribe(response => {\n      this.companyList = response;\n    });\n  }\n  // Handler for form submission\n  onSubmit() {\n    // Check if the form is valid\n    if (this.applicationForm.invalid) {\n      return;\n    }\n    // Send the application data to the API\n    this.dataService.createApplication(this.applicationForm.value).subscribe(response => {\n      // Redirect to acknowledgement page\n      this.router.navigateByUrl('/acknowledgement');\n    });\n  }\n}\nNewApplicationComponent.ɵfac = function NewApplicationComponent_Factory(t) {\n  return new (t || NewApplicationComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService), i0.ɵɵdirectiveInject(i3.Router));\n};\nNewApplicationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NewApplicationComponent,\n  selectors: [[\"app-newapplication\"]],\n  decls: 2,\n  vars: 0,\n  template: function NewApplicationComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"newapplication works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAEA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;AASnE,OAAM,MAAOC,uBAAuB;EASlCC,YACUC,WAAwB,EACxBC,WAAuB,EACvBC,MAAc;IAFd,gBAAW,GAAXF,WAAW;IACX,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IAThB,gBAAW,GAAQ,EAAE;IACrB,aAAQ,GAAU,CAChB;MAAEC,IAAI,EAAE,UAAU;MAAEC,KAAK,EAAE;IAAU,CAAE,EACvC;MAAED,IAAI,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO,CAAE,CAClC;EAMG;EAEJC,QAAQ;IACN;IACA,IAAI,CAACC,eAAe,GAAG,IAAI,CAACN,WAAW,CAACO,KAAK,CAAC;MAC5CC,SAAS,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACY,QAAQ,CAAC;MACpCC,QAAQ,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACY,QAAQ,CAAC;MACnCE,KAAK,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACc,KAAK,CAAC,CAAC;MACpDC,WAAW,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACY,QAAQ,CAAC;MACtCI,IAAI,EAAE,CAAC,EAAE,EAAEhB,UAAU,CAACY,QAAQ,CAAC;MAC/BK,aAAa,EAAE,CAAC,EAAE,CAAC;MACnBC,OAAO,EAAE,CAAC,EAAE,EAAElB,UAAU,CAACY,QAAQ;KAClC,CAAC;IAEF;IACA,IAAI,CAACR,WAAW,CAACe,YAAY,EAAE,CAACC,SAAS,CAAEC,QAAe,IAAI;MAC5D,IAAI,CAACC,WAAW,GAAGD,QAAQ;IAC7B,CAAC,CAAC;EACJ;EAEA;EACAE,QAAQ;IACN;IACA,IAAI,IAAI,CAACd,eAAe,CAACe,OAAO,EAAE;MAChC;;IAGF;IACA,IAAI,CAACpB,WAAW,CAACqB,iBAAiB,CAAC,IAAI,CAAChB,eAAe,CAACF,KAAK,CAAC,CAACa,SAAS,CAAEC,QAAa,IAAI;MACzF;MACA,IAAI,CAAChB,MAAM,CAACqB,aAAa,CAAC,kBAAkB,CAAC;IAC/C,CAAC,CAAC;EACJ;;AA7CWzB,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;QAAvBA,uBAAuB;EAAA0B;EAAAC;EAAAC;EAAAC;IAAA;MCXpCC,yBAAG;MAAAA,qCAAqB;MAAAA,iBAAI","names":["Validators","NewApplicationComponent","constructor","formBuilder","dataService","router","name","value","ngOnInit","applicationForm","group","firstName","required","lastName","email","phoneNumber","role","licenseNumber","company","getCompanies","subscribe","response","companyList","onSubmit","invalid","createApplication","navigateByUrl","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["D:\\projects\\idp\\Frontend\\ridesharingplatform\\src\\app\\UserVerification\\newapplication\\newapplication.component.ts","D:\\projects\\idp\\Frontend\\ridesharingplatform\\src\\app\\UserVerification\\newapplication\\newapplication.component.html"],"sourcesContent":["\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ApiService } from './api.service';\n\n@Component({\n  selector: 'app-newapplication',\n  templateUrl: './newapplication.component.html',\n  styleUrls: ['./newapplication.component.scss']\n})\nexport class NewApplicationComponent implements OnInit {\n\n  applicationForm: FormGroup;\n  companyList: any[]=[];\n  roleList: any[] = [\n    { name: 'Motorist', value: 'MOTORIST' },\n    { name: 'Rider', value: 'RIDER' }\n  ];\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private dataService: ApiService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    // Initialize the form with required fields and validators\n    this.applicationForm = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      phoneNumber: ['', Validators.required],\n      role: ['', Validators.required],\n      licenseNumber: [''],\n      company: ['', Validators.required]\n    });\n\n    // Fetch the list of companies from the API\n    this.dataService.getCompanies().subscribe((response: any[]) => {\n      this.companyList = response;\n    });\n  }\n\n  // Handler for form submission\n  onSubmit() {\n    // Check if the form is valid\n    if (this.applicationForm.invalid) {\n      return;\n    }\n\n    // Send the application data to the API\n    this.dataService.createApplication(this.applicationForm.value).subscribe((response: any) => {\n      // Redirect to acknowledgement page\n      this.router.navigateByUrl('/acknowledgement');\n    });\n  }\n\n}\n","<p>newapplication works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}