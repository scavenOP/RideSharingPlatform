{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/app.tokenservice\";\nexport class ApiService {\n  constructor(http, tokenservice) {\n    this.http = http;\n    this.tokenservice = tokenservice;\n    this.apiUrl = 'https://localhost:7083/api';\n    this.unAuthorisedError = new EventEmitter();\n  }\n  getCompanies() {\n    return this.http.get(`${this.apiUrl}/companies`).pipe(catchError(this.handleError));\n  }\n  createApplication(applicationData) {\n    return this.http.post(`${this.apiUrl}/applications/new`, applicationData).pipe(catchError(this.handleError));\n  }\n  getPendingApplications() {\n    const headers = new HttpHeaders({\n      Authorizatiion: 'Bearer ${this.tokenService.getToken()}'\n    });\n    return this.http.get(`${this.apiUrl}/applications`, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  updateApplicationStatus(applicationData) {\n    //const body = { id: applicationId, status: status };\n    console.log(applicationData);\n    return this.http.put(`${this.apiUrl}/applications/approvereject`, applicationData).pipe(catchError(error => {\n      console.log(error.error);\n      return throwError(\"er\");\n    }));\n  }\n  getApplicationById(applicationId) {\n    return this.http.get(`${this.apiUrl}/applications/${applicationId}`).pipe(catchError(error => {\n      return throwError(() => new Error(error));\n    }));\n  }\n  login(email, password) {\n    const url = `${this.apiUrl}/Auth/login`;\n    const body = {\n      email,\n      password\n    };\n    return this.http.post(url, body).pipe(map(response => {\n      this.tokenservice.setToken(response.token);\n      this.tokenservice.setRole(response.role);\n      this.tokenservice.setname(response.name);\n      return response;\n    }), catchError(error => {\n      console.log(error.error);\n      let message = 'An error occurred while logging in';\n      if (error.status === 500 && error.error.message) {\n        message = error.error;\n      }\n      return throwError(() => new Error(error.error));\n    }));\n  }\n  handleError(error) {\n    let errorMessage = 'An error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side errors\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side errors\n      console.log(error);\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error}`;\n    }\n    if (error.status === 401) {\n      this.unAuthorisedError.emit();\n    }\n    console.error(errorMessage);\n    return throwError(error);\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokenService));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","HttpHeaders","throwError","catchError","map","ApiService","constructor","http","tokenservice","getCompanies","get","apiUrl","pipe","handleError","createApplication","applicationData","post","getPendingApplications","headers","Authorizatiion","updateApplicationStatus","console","log","put","error","getApplicationById","applicationId","Error","login","email","password","url","body","response","setToken","token","setRole","role","setname","name","message","status","errorMessage","ErrorEvent","unAuthorisedError","emit","factory","providedIn"],"sourceRoot":"","sources":["C:\\RideSharingPlatform\\RideSharingPlatform-main\\Frontend\\ridesharingplatform\\src\\app\\UserVerification\\api.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError,map } from 'rxjs/operators';\nimport { TokenService } from 'src/app/app.tokenservice';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  private apiUrl = 'https://localhost:7083/api'; \n  public unAuthorisedError = new EventEmitter<void>();\n\n  constructor(private http: HttpClient , private tokenservice: TokenService) {}\n\n  getCompanies(): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/companies`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  createApplication(applicationData: any): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/applications/new`, applicationData)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  getPendingApplications(): Observable<any> {\n    const headers=new HttpHeaders({Authorizatiion: 'Bearer ${this.tokenService.getToken()}'});\n\n    return this.http.get<any>(`${this.apiUrl}/applications`,{headers})\n      .pipe(\n        catchError(this.handleError)\n        \n      );\n  }\n\n  updateApplicationStatus(applicationData: any): Observable<any> {\n    \n    //const body = { id: applicationId, status: status };\n    console.log(applicationData);\n    return this.http.put<any>(`${this.apiUrl}/applications/approvereject`, applicationData)\n      .pipe(\n        catchError(error => {\n          console.log(error.error);\n          return throwError(\"er\");\n        })\n      );\n  }\n\n  getApplicationById(applicationId: number): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/applications/${applicationId}`)\n      .pipe(\n        catchError((error) =>{\n        return throwError(()=> new Error(error));})\n      );\n  }\n\n  login(email: string, password: string): Observable<{ name: string, token: string,role:string  }> {\n    const url = `${this.apiUrl}/Auth/login`;\n    const body = { email, password };\n    return this.http.post<{ name: string, token: string,role:string }>(url, body)\n      .pipe(\n        map(response => {\n          this.tokenservice.setToken(response.token);\n          this.tokenservice.setRole(response.role);\n          this.tokenservice.setname(response.name);\n          return response;\n        }),\n        catchError(error => {\n          console.log(error.error);\n          let message = 'An error occurred while logging in';\n          if (error.status === 500 && error.error.message) {\n            message = error.error;\n          }\n          return throwError(() => new Error(error.error));\n        })\n      );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    let errorMessage = 'An error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side errors\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side errors\n\n      console.log(error);\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error}`;\n    }\n    if(error.status===401){\n      this.unAuthorisedError.emit();\n    }\n    console.error(errorMessage);\n    return throwError(error);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}