{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../UserVerification/api.service\";\nimport * as i4 from \"../app.tokenservice\";\nimport * as i5 from \"../nav/nav.component\";\nimport * as i6 from \"@angular/common\";\nfunction LoginComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nfunction LoginComponent_span_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 12);\n  }\n}\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(route, router, formBuilder, loginService, tokenservice, navComponent) {\n      this.route = route;\n      this.router = router;\n      this.formBuilder = formBuilder;\n      this.loginService = loginService;\n      this.tokenservice = tokenservice;\n      this.navComponent = navComponent;\n    }\n    ngOnInit() {\n      this.loginForm = this.formBuilder.group({\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', [Validators.required, Validators.minLength(6)]]\n      });\n    }\n    onSubmit() {\n      this.isLoading = true;\n      const email = this.loginForm.controls['email'].value;\n      const password = this.loginForm.controls['password'].value;\n      this.loginService.login(email, password).subscribe(response => {\n        // localStorage.setItem('token', response.token);\n        // localStorage.setItem('username', response.name);\n        // close the modal on successful login\n        console.log(response.token);\n        this.tokenservice.setname(response.name);\n        this.tokenservice.setToken(response.token);\n        this.tokenservice.setRole(response.role);\n        this.tokenservice.setid(response.id);\n        console.log(this.tokenservice.getid());\n        console.log(\"name:\" + this.tokenservice.getname());\n        //console.log(this.tokenservice.getname());\n        this.navComponent.currentUser = this.tokenservice.getname();\n        //document.getElementById('closeModal').click();\n        this.isLoading = false;\n        const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n        this.router.navigate([returnUrl]);\n      }, error => {\n        this.errorMessage = error.message;\n        console.log(error);\n        this.isLoading = false;\n      });\n    }\n  }\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ApiService), i0.ɵɵdirectiveInject(i4.TokenService), i0.ɵɵdirectiveInject(i5.NavComponent));\n  };\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 16,\n    vars: 4,\n    consts: [[\"id\", \"loginModalLabel\", 1, \"text-center\", \"mb-4\"], [1, \"modal-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"emailInput\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"emailInput\", \"formControlName\", \"email\", \"placeholder\", \"Enter email\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"passwordInput\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"passwordInput\", \"formControlName\", \"password\", \"placeholder\", \"Password\", \"required\", \"\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm mr-1\", 4, \"ngIf\"], [1, \"text-danger\"], [1, \"spinner-border\", \"spinner-border-sm\", \"mr-1\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h5\", 0);\n        i0.ɵɵtext(1, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1)(3, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"label\", 4);\n        i0.ɵɵtext(6, \"Email address\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 3)(9, \"label\", 6);\n        i0.ɵɵtext(10, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(12, LoginComponent_div_12_Template, 2, 1, \"div\", 8);\n        i0.ɵɵelementStart(13, \"button\", 9);\n        i0.ɵɵtemplate(14, LoginComponent_span_14_Template, 1, 0, \"span\", 10);\n        i0.ɵɵtext(15, \" Login\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.isLoading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n      }\n    },\n    dependencies: [i6.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.FormGroupDirective, i2.FormControlName],\n    styles: [\"form[_ngcontent-%COMP%]{min-width:300px;max-width:400px;padding:20px;margin:0 auto;background:#70e1f5;background:linear-gradient(to right,#ffd194,#70e1f5);box-shadow:3px 3px 23px -9px #000000db}form[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:1px solid #eee;border-radius:0!important;padding:5px 8px;color:#444}form[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin-top:20px}.pull-right[_ngcontent-%COMP%]{float:right}.cont[_ngcontent-%COMP%]{position:absolute;inset:0}\"]\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}