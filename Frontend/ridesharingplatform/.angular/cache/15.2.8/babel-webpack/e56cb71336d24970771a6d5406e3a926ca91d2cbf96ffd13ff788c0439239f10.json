{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nimport { throwError } from \"rxjs\";\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../app.tokenservice\";\nexport class ApiService {\n  constructor(http, tokenservice) {\n    this.http = http;\n    this.tokenservice = tokenservice;\n    this.apiUrl = 'https://ridesharingapi.azurewebsites.net/api';\n    this.unAuthorisedError = new EventEmitter();\n    this.token = this.tokenservice.getToken();\n  }\n  getdistances() {\n    return this.http.get(`${this.apiUrl}/distances`).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'An error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side errors\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side errors\n      console.log(error);\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error}`;\n    }\n    if (error.status === 401) {\n      this.unAuthorisedError.emit();\n    }\n    console.error(errorMessage);\n    return throwError(error);\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokenService));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,YAAY,QAAoB,eAAe;AAExD,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAY,gBAAgB;;;;AAM7C,OAAM,MAAOC,UAAU;EAKrBC,YAAoBC,IAAgB,EAAWC,YAA0B;IAArD,SAAI,GAAJD,IAAI;IAAuB,iBAAY,GAAZC,YAAY;IAJnD,WAAM,GAAG,8CAA8C;IACxD,sBAAiB,GAAG,IAAIN,YAAY,EAAQ;IAC3C,UAAK,GAAC,IAAI,CAACM,YAAY,CAACC,QAAQ,EAAE;EAEkC;EAE5EC,YAAY;IACR,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAM,GAAG,IAAI,CAACC,MAAM,YAAY,CAAC,CAClDC,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAC7B;EACL;EAEQA,WAAW,CAACC,KAAwB;IAC1C,IAAIC,YAAY,GAAG,mBAAmB;IACtC,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC/C,MAAM;MACL;MAEAC,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;MAClBC,YAAY,GAAG,eAAeD,KAAK,CAACM,MAAM,cAAcN,KAAK,EAAE;;IAEjE,IAAGA,KAAK,CAACM,MAAM,KAAG,GAAG,EAAC;MACpB,IAAI,CAACC,iBAAiB,CAACC,IAAI,EAAE;;IAE/BJ,OAAO,CAACJ,KAAK,CAACC,YAAY,CAAC;IAC3B,OAAOb,UAAU,CAACY,KAAK,CAAC;EAC1B;;AA9BSV,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAmB,SAAVnB,UAAU;EAAAoB,YAFT;AAAM","names":["EventEmitter","throwError","catchError","ApiService","constructor","http","tokenservice","getToken","getdistances","get","apiUrl","pipe","handleError","error","errorMessage","ErrorEvent","message","console","log","status","unAuthorisedError","emit","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\acer pc\\Documents\\GitHub\\RideSharingPlatform\\Frontend\\ridesharingplatform\\src\\app\\RideManagement\\RideApi.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\r\nimport { EventEmitter, Injectable } from \"@angular/core\";\r\nimport { TokenService } from \"../app.tokenservice\";\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { catchError,map } from 'rxjs/operators';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class ApiService {\r\n    private apiUrl = 'https://ridesharingapi.azurewebsites.net/api'; \r\n    public unAuthorisedError = new EventEmitter<void>();\r\n    private token=this.tokenservice.getToken();\r\n  \r\n    constructor(private http: HttpClient , private tokenservice: TokenService) {}\r\n\r\n    getdistances(): Observable<any> {\r\n        return this.http.get<any>(`${this.apiUrl}/distances`)\r\n          .pipe(\r\n            catchError(this.handleError)\r\n          );\r\n      }\r\n\r\n      private handleError(error: HttpErrorResponse) {\r\n        let errorMessage = 'An error occurred';\r\n        if (error.error instanceof ErrorEvent) {\r\n          // Client-side errors\r\n          errorMessage = `Error: ${error.error.message}`;\r\n        } else {\r\n          // Server-side errors\r\n    \r\n          console.log(error);\r\n          errorMessage = `Error Code: ${error.status}\\nMessage: ${error}`;\r\n        }\r\n        if(error.status===401){\r\n          this.unAuthorisedError.emit();\r\n        }\r\n        console.error(errorMessage);\r\n        return throwError(error);\r\n      }\r\n  }"]},"metadata":{},"sourceType":"module","externalDependencies":[]}