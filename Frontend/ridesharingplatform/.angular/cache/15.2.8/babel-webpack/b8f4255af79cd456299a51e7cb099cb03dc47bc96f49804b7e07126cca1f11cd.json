{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/app.tokenservice\";\nexport class ApiService {\n  constructor(http, tokenservice) {\n    this.http = http;\n    this.tokenservice = tokenservice;\n    this.apiUrl = 'https://localhost:7083/api'; // change this to your API URL\n  }\n\n  getCompanies() {\n    return this.http.get(`${this.apiUrl}/companies`).pipe(catchError(this.handleError));\n  }\n  createApplication(applicationData) {\n    return this.http.post(`${this.apiUrl}/applications/new`, applicationData).pipe(catchError(this.handleError));\n  }\n  getPendingApplications() {\n    return this.http.get(`${this.apiUrl}/applications`).pipe(catchError(this.handleError));\n  }\n  updateApplicationStatus(applicationId, status) {\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    const body = {\n      id: applicationId,\n      status: status\n    };\n    return this.http.put(`${this.apiUrl}/applications/approvereject`, body, {\n      headers: headers\n    }).pipe(catchError(this.handleError));\n  }\n  getApplicationById(applicationId) {\n    return this.http.get(`${this.apiUrl}/applications/${applicationId}`).pipe(catchError(this.handleError));\n  }\n  login(email, password) {\n    const url = `${this.apiUrl}/Auth/login`;\n    const body = {\n      email,\n      password\n    };\n    return this.http.post(url, body).pipe(map(response => {\n      this.tokenservice.setToken(response.token);\n      return response;\n    }), catchError(error => {\n      console.log(error);\n      let message = 'An error occurred while logging in';\n      if (error.status === 500 && error.error.message) {\n        message = error.error.message;\n      }\n      return throwError(message);\n    }));\n  }\n  handleError(error) {\n    let errorMessage = 'An error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side errors\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side errors\n      console.log(error);\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error}`;\n    }\n    console.error(errorMessage);\n    return throwError(errorMessage);\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokenService));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","throwError","catchError","map","ApiService","constructor","http","tokenservice","getCompanies","get","apiUrl","pipe","handleError","createApplication","applicationData","post","getPendingApplications","updateApplicationStatus","applicationId","status","headers","set","body","id","put","getApplicationById","login","email","password","url","response","setToken","token","error","console","log","message","errorMessage","ErrorEvent","factory","providedIn"],"sourceRoot":"","sources":["D:\\projects\\ridesharingplatform\\RideSharingPlatform\\Frontend\\ridesharingplatform\\src\\app\\UserVerification\\newapplication\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError,map } from 'rxjs/operators';\r\nimport { TokenService } from 'src/app/app.tokenservice';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n  private apiUrl = 'https://localhost:7083/api'; // change this to your API URL\r\n\r\n  constructor(private http: HttpClient , private tokenservice: TokenService) {}\r\n\r\n  getCompanies(): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/companies`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  createApplication(applicationData: any): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/applications/new`, applicationData)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getPendingApplications(): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/applications`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateApplicationStatus(applicationId: number, status: string): Observable<any> {\r\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n    const body = { id: applicationId, status: status };\r\n    return this.http.put<any>(`${this.apiUrl}/applications/approvereject`, body, { headers: headers })\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getApplicationById(applicationId: number): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/applications/${applicationId}`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  login(email: string, password: string): Observable<{ name: string, token: string }> {\r\n    const url = `${this.apiUrl}/Auth/login`;\r\n    const body = { email, password };\r\n    return this.http.post<{ name: string, token: string }>(url, body)\r\n      .pipe(\r\n        map(response => {\r\n          this.tokenservice.setToken(response.token);\r\n          return response;\r\n        }),\r\n        catchError(error => {\r\n          console.log(error);\r\n          let message = 'An error occurred while logging in';\r\n          if (error.status === 500 && error.error.message) {\r\n            message = error.error.message;\r\n          }\r\n          return throwError(message);\r\n        })\r\n      );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    let errorMessage = 'An error occurred';\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side errors\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      // Server-side errors\r\n      console.log(error);\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error}`;\r\n    }\r\n    console.error(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}