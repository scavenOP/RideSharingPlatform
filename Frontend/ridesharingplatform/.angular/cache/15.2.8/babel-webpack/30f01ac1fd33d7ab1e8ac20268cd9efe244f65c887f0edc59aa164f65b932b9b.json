{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/app.tokenservice\";\nexport class ApiService {\n  constructor(http, tokenservice) {\n    this.http = http;\n    this.tokenservice = tokenservice;\n    this.apiUrl = 'https://localhost:7083/api'; // change this to your API URL\n  }\n\n  getCompanies() {\n    return this.http.get(`${this.apiUrl}/companies`).pipe(catchError(this.handleError));\n  }\n  createApplication(applicationData) {\n    return this.http.post(`${this.apiUrl}/applications/new`, applicationData).pipe(catchError(this.handleError));\n  }\n  getPendingApplications() {\n    return this.http.get(`${this.apiUrl}/applications`).pipe(catchError(this.handleError));\n  }\n  updateApplicationStatus(applicationData) {\n    //const body = { id: applicationId, status: status };\n    return this.http.put(`${this.apiUrl}/applications/approvereject`, applicationData).pipe(catchError(error => {\n      console.log(error.error);\n      return throwError(\"er\");\n    }));\n  }\n  getApplicationById(applicationId) {\n    return this.http.get(`${this.apiUrl}/applications/${applicationId}`).pipe(catchError(this.handleError));\n  }\n  login(email, password) {\n    const url = `${this.apiUrl}/Auth/login`;\n    const body = {\n      email,\n      password\n    };\n    return this.http.post(url, body).pipe(map(response => {\n      this.tokenservice.setToken(response.token);\n      return response;\n    }), catchError(error => {\n      console.log(error.error);\n      let message = 'An error occurred while logging in';\n      if (error.status === 500 && error.error.message) {\n        message = error.error;\n      }\n      return throwError(() => new Error(error.error));\n    }));\n  }\n  handleError(error) {\n    let errorMessage = 'An error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side errors\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side errors\n      console.log(error);\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error}`;\n    }\n    console.error(errorMessage);\n    return throwError(errorMessage);\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokenService));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["throwError","catchError","map","ApiService","constructor","http","tokenservice","getCompanies","get","apiUrl","pipe","handleError","createApplication","applicationData","post","getPendingApplications","updateApplicationStatus","put","error","console","log","getApplicationById","applicationId","login","email","password","url","body","response","setToken","token","message","status","Error","errorMessage","ErrorEvent","factory","providedIn"],"sourceRoot":"","sources":["C:\\RideSharingPlatform\\RideSharingPlatform-main\\Frontend\\ridesharingplatform\\src\\app\\UserVerification\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError,map } from 'rxjs/operators';\nimport { TokenService } from 'src/app/app.tokenservice';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  private apiUrl = 'https://localhost:7083/api'; // change this to your API URL\n\n  constructor(private http: HttpClient , private tokenservice: TokenService) {}\n\n  getCompanies(): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/companies`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  createApplication(applicationData: any): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/applications/new`, applicationData)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  getPendingApplications(): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/applications`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  updateApplicationStatus(applicationData: any): Observable<any> {\n    \n    //const body = { id: applicationId, status: status };\n    return this.http.put<any>(`${this.apiUrl}/applications/approvereject`, applicationData)\n      .pipe(\n        catchError(error => {\n          console.log(error.error);\n          return throwError(\"er\");\n        })\n      );\n  }\n\n  getApplicationById(applicationId: number): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/applications/${applicationId}`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  login(email: string, password: string): Observable<{ name: string, token: string,messege:string  }> {\n    const url = `${this.apiUrl}/Auth/login`;\n    const body = { email, password };\n    return this.http.post<{ name: string, token: string,messege:string }>(url, body)\n      .pipe(\n        map(response => {\n          this.tokenservice.setToken(response.token);\n          return response;\n        }),\n        catchError(error => {\n          console.log(error.error);\n          let message = 'An error occurred while logging in';\n          if (error.status === 500 && error.error.message) {\n            message = error.error;\n          }\n          return throwError(() => new Error(error.error));\n        })\n      );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    let errorMessage = 'An error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side errors\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side errors\n      console.log(error);\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error}`;\n    }\n    console.error(errorMessage);\n    return throwError(errorMessage);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}