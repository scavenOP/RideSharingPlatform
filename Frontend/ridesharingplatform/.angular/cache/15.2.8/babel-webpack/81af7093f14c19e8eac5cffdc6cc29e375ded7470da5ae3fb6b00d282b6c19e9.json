{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/app.tokenservice\";\nexport class VehicleApiService {\n  constructor(http, tokenservice) {\n    this.http = http;\n    this.tokenservice = tokenservice;\n    this.apiUrl = 'https://ridesharingapi.azurewebsites.net/api';\n    this.unAuthorisedError = new EventEmitter();\n    this.token = this.tokenservice.getToken();\n  }\n}\nVehicleApiService.ɵfac = function VehicleApiService_Factory(t) {\n  return new (t || VehicleApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokenService));\n};\nVehicleApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: VehicleApiService,\n  factory: VehicleApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAASA,YAAY,QAAoB,eAAe;;;;AAWxD,OAAM,MAAOC,iBAAiB;EAK5BC,YAAoBC,IAAgB,EAAWC,YAA0B;IAArD,SAAI,GAAJD,IAAI;IAAuB,iBAAY,GAAZC,YAAY;IAJnD,WAAM,GAAG,8CAA8C;IACxD,sBAAiB,GAAG,IAAIJ,YAAY,EAAQ;IAC3C,UAAK,GAAC,IAAI,CAACI,YAAY,CAACC,QAAQ,EAAE;EAEkC;;AALjEJ,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAK,SAAjBL,iBAAiB;EAAAM,YAFhB;AAAM","names":["EventEmitter","VehicleApiService","constructor","http","tokenservice","getToken","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\acer pc\\Documents\\GitHub\\RideSharingPlatform\\Frontend\\ridesharingplatform\\src\\app\\VehicleManagement\\addvehicle\\api.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError,map } from 'rxjs/operators';\r\nimport { TokenService } from 'src/app/app.tokenservice';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VehicleApiService {\r\n  private apiUrl = 'https://ridesharingapi.azurewebsites.net/api'; \r\n  public unAuthorisedError = new EventEmitter<void>();\r\n  private token=this.tokenservice.getToken();\r\n\r\n  constructor(private http: HttpClient , private tokenservice: TokenService) {}\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}