{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/app.tokenservice\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http, tokenservice) {\n      this.http = http;\n      this.tokenservice = tokenservice;\n      this.apiUrl = 'https://ridesharingapi.azurewebsites.net/api';\n      this.unAuthorisedError = new EventEmitter();\n      this.token = this.tokenservice.getToken();\n    }\n    getCompanies() {\n      return this.http.get(`${this.apiUrl}/companies`).pipe(catchError(this.handleError));\n    }\n    createApplication(applicationData) {\n      return this.http.post(`${this.apiUrl}/applications/new`, applicationData).pipe(catchError(this.handleError));\n    }\n    getPendingApplications() {\n      // this.token= \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiU2VjdXJpdHlIZWFkIiwiUm9sZUlkIjoiMyIsInByZWZlcnJlZF91c2VybmFtZSI6IkFtaXQgU2F1IiwiaWQiOiIxIiwiZW1haWwiOiJhbWl0QGN0cy5jb20iLCJuYmYiOjE2ODM3MTM0MjAsImV4cCI6MTY4NjMwNTQyMCwiaWF0IjoxNjgzNzEzNDIwfQ.br1CXxLqlHy-dHg3QyJUWgpCd8UKK8GFw8PQUGctLDE\";\n      // console.log(this.token);\n      this.token = this.tokenservice.getToken();\n      console.log(\"ht \" + this.token);\n      const headers = new HttpHeaders({\n        Authorization: 'Bearer ' + this.token\n      });\n      return this.http.get(`${this.apiUrl}/applications`, {\n        headers\n      }).pipe(catchError(this.handleError));\n    }\n    updateApplicationStatus(applicationData) {\n      //const body = { id: applicationId, status: status };\n      console.log(applicationData);\n      return this.http.put(`${this.apiUrl}/applications/approvereject`, applicationData).pipe(catchError(error => {\n        console.log(error.error);\n        return throwError(\"er\");\n      }));\n    }\n    getApplicationById(applicationId) {\n      return this.http.get(`${this.apiUrl}/applications/${applicationId}`).pipe(catchError(error => {\n        return throwError(() => new Error(error));\n      }));\n    }\n    login(email, password) {\n      const url = `${this.apiUrl}/Auth/login`;\n      const body = {\n        email,\n        password\n      };\n      return this.http.post(url, body).pipe(map(response => {\n        this.tokenservice.setToken(response.token);\n        this.tokenservice.setRole(response.role);\n        this.tokenservice.setname(response.name);\n        this.tokenservice.setid(response.id);\n        return response;\n      }), catchError(error => {\n        console.log(error.error);\n        let message = 'An error occurred while logging in';\n        if (error.status === 500 && error.error.message) {\n          message = error.error;\n        }\n        return throwError(() => new Error(error.error));\n      }));\n    }\n    handleError(error) {\n      let errorMessage = 'An error occurred';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side errors\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Server-side errors\n        console.log(error);\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error}`;\n      }\n      if (error.status === 401) {\n        this.unAuthorisedError.emit();\n      }\n      console.error(errorMessage);\n      return throwError(error);\n    }\n  }\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokenService));\n  };\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}