{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { EventEmitter } from \"@angular/core\";\nimport { throwError } from \"rxjs\";\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./Models/model.faredto\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../app.tokenservice\";\nexport class ApiService {\n  constructor(faredto, http, tokenservice) {\n    this.faredto = faredto;\n    this.http = http;\n    this.tokenservice = tokenservice;\n    this.apiUrl = 'https://ridesharingapi.azurewebsites.net/api';\n    this.unAuthorisedError = new EventEmitter();\n    this.token = this.tokenservice.getToken();\n  }\n  getdistances() {\n    return this.http.get(`${this.apiUrl}/distances`).pipe(catchError(this.handleError));\n  }\n  getregno(id) {\n    this.http.get(`${this.apiUrl}/GetRegNo/${id}`, {\n      responseType: 'text'\n    }).subscribe(response => {\n      // Handle the response string\n      console.log(\"ff\" + response);\n      return response;\n      // Process the response further as needed\n    }, error => {\n      // Handle errors\n      console.error(error);\n      return \"\";\n    });\n  }\n  getfare(distanceID, vehicleRegistrationNo) {\n    console.log(\"dd\" + distanceID);\n    const params = new HttpParams().set('distanceID', distanceID).set('vehicleRegistrationNo', vehicleRegistrationNo);\n    console.log(params);\n    this.http.get(`${this.apiUrl}/rides/calculatefare`, {\n      params\n    }).subscribe(response => {\n      // Handle the response string\n      console.log(response);\n      return response;\n      // Process the response further as needed\n    }, error => {\n      // Handle errors\n      console.error(error);\n    });\n  }\n  createRide(applicationData) {\n    return this.http.post(`${this.apiUrl}/rides/schedule`, applicationData).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'An error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side errors\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side errors\n      console.log(error);\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error}`;\n    }\n    if (error.status === 401) {\n      this.unAuthorisedError.emit();\n    }\n    console.error(errorMessage);\n    return throwError(error);\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.FareDTO), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.TokenService));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpParams","EventEmitter","throwError","catchError","ApiService","constructor","faredto","http","tokenservice","getToken","getdistances","get","apiUrl","pipe","handleError","getregno","id","responseType","subscribe","response","console","log","error","getfare","distanceID","vehicleRegistrationNo","params","set","createRide","applicationData","post","errorMessage","ErrorEvent","message","status","unAuthorisedError","emit","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\acer pc\\Documents\\GitHub\\RideSharingPlatform\\Frontend\\ridesharingplatform\\src\\app\\RideManagement\\RideApi.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpParams,HttpResponse } from \"@angular/common/http\";\r\nimport { EventEmitter, Injectable } from \"@angular/core\";\r\nimport { TokenService } from \"../app.tokenservice\";\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { catchError,map } from 'rxjs/operators';\r\nimport { FareDTO } from \"./Models/model.faredto\";\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class ApiService {\r\n    private apiUrl = 'https://ridesharingapi.azurewebsites.net/api'; \r\n    public unAuthorisedError = new EventEmitter<void>();\r\n    private token=this.tokenservice.getToken();\r\n  \r\n    constructor(private faredto:FareDTO,private http: HttpClient , private tokenservice: TokenService) {}\r\n\r\n    getdistances(): Observable<any> {\r\n        return this.http.get<any>(`${this.apiUrl}/distances`)\r\n          .pipe(\r\n            catchError(this.handleError)\r\n          );\r\n      }\r\n\r\n      getregno(id:string){\r\n        this.http.get(`${this.apiUrl}/GetRegNo/${id}`,{ responseType: 'text' })\r\n        .subscribe(\r\n            (response: string) => {\r\n              // Handle the response string\r\n              console.log(\"ff\"+response);\r\n              return response;\r\n              // Process the response further as needed\r\n            },\r\n            \r\n            (error) => {\r\n              // Handle errors\r\n              console.error(error);\r\n              return \"\";\r\n            },\r\n            \r\n            \r\n          );\r\n        \r\n      }\r\n      getfare(distanceID:string,vehicleRegistrationNo:any) {\r\n        console.log(\"dd\"+distanceID)\r\n       const params = new HttpParams()\r\n    .set('distanceID', distanceID)\r\n    .set('vehicleRegistrationNo', vehicleRegistrationNo);\r\n    console.log(params);\r\n        this.http.get<any>(`${this.apiUrl}/rides/calculatefare`,{params},)\r\n        .subscribe(\r\n            (response: string) => {\r\n              // Handle the response string\r\n              console.log(response);\r\n              return response;\r\n              // Process the response further as needed\r\n            },\r\n            (error) => {\r\n              // Handle errors\r\n              console.error(error);\r\n            }\r\n          );\r\n      }\r\n\r\n      createRide(applicationData: any): Observable<any> {\r\n        return this.http.post<any>(`${this.apiUrl}/rides/schedule`, applicationData)\r\n          .pipe(\r\n            catchError(this.handleError)\r\n          );\r\n      }\r\n\r\n      private handleError(error: HttpErrorResponse) {\r\n        let errorMessage = 'An error occurred';\r\n        if (error.error instanceof ErrorEvent) {\r\n          // Client-side errors\r\n          errorMessage = `Error: ${error.error.message}`;\r\n        } else {\r\n          // Server-side errors\r\n    \r\n          console.log(error);\r\n          errorMessage = `Error Code: ${error.status}\\nMessage: ${error}`;\r\n        }\r\n        if(error.status===401){\r\n          this.unAuthorisedError.emit();\r\n        }\r\n        console.error(errorMessage);\r\n        return throwError(error);\r\n      }\r\n  }"]},"metadata":{},"sourceType":"module","externalDependencies":[]}