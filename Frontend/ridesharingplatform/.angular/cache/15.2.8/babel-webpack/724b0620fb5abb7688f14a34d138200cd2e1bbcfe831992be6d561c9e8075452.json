{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ApplicationRequestComponent = class ApplicationRequestComponent {\n  constructor(router, route, apiService, tokenService) {\n    this.router = router;\n    this.route = route;\n    this.apiService = apiService;\n    this.tokenService = tokenService;\n    this.userhasrole = true;\n  }\n  ngOnInit() {\n    this.isLoading = true;\n    this.currentuserrole = this.tokenService.getRole();\n    this.isAutherised = this.tokenService.getToken() != null;\n    this.getPendingApplicationRequest();\n    console.log(this.tokenService.getname());\n    this.isLoading = false;\n    this.userhasrole = this.currentuserrole == 'SecurityHead';\n    this.redrr();\n  }\n  redrr() {\n    if (!this.isAutherised) {\n      this.router.navigate(['/login']);\n    }\n  }\n  selectRequest(request) {\n    this.applicationRequest = request;\n  }\n  getPendingApplicationRequest() {\n    if (this.isAutherised) {\n      this.apiService.getPendingApplications().subscribe(requests => {\n        this.applicationRequests = requests;\n      }, error => {\n        console.log(error);\n        if (this.tokenService.getRole() != \"SecurityHead\") {\n          this.userhasrole = false;\n          console.log(\"User Not Authorized\");\n        }\n      });\n    }\n  }\n  getApplicationByUserID(userId) {\n    this.apiService.getApplicationById(userId).subscribe(applicationRequest => {\n      this.applicationRequest = applicationRequest;\n    }, error => {\n      console.log(error);\n    });\n  }\n  updateApplicationStatus() {\n    //this.applicationRequest.applicationStatus = status;\n    this.apiService.updateApplicationStatus(this.applicationRequest).subscribe(response => {\n      this.applicationRequest = null;\n      this.getPendingApplicationRequest();\n      console.log(response);\n      this.router.navigate(['/application-request']);\n    }, error => {\n      console.log(error);\n      if (error.status === 401) {\n        console.log(\"User Not Authorized\");\n      }\n    });\n  }\n};\nApplicationRequestComponent = __decorate([Component({\n  selector: 'app-application-request',\n  templateUrl: './application-request.component.html',\n  styleUrls: ['./application-request.component.scss']\n})], ApplicationRequestComponent);\nexport { ApplicationRequestComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAA8B,eAAe;AAexD,IAAMC,2BAA2B,GAAjC,MAAMA,2BAA2B;EAUtCC,YAAoBC,MAAc,EAASC,KAAqB,EAAUC,UAAsB,EAASC,YAA0B;IAA/G,WAAM,GAANH,MAAM;IAAiB,UAAK,GAALC,KAAK;IAA0B,eAAU,GAAVC,UAAU;IAAqB,iBAAY,GAAZC,YAAY;IALrH,gBAAW,GAAW,IAAI;EAK2G;EAErIC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAC,IAAI;IACnB,IAAI,CAACC,eAAe,GAAC,IAAI,CAACH,YAAY,CAACI,OAAO,EAAE;IAChD,IAAI,CAACC,YAAY,GAAC,IAAI,CAACL,YAAY,CAACM,QAAQ,EAAE,IAAI,IAAI;IACtD,IAAI,CAACC,4BAA4B,EAAE;IACnCC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,YAAY,CAACU,OAAO,EAAE,CAAC;IACxC,IAAI,CAACR,SAAS,GAAC,KAAK;IACpB,IAAI,CAACS,WAAW,GAAC,IAAI,CAACR,eAAe,IAAE,cAAc;IACrD,IAAI,CAACS,KAAK,EAAE;EAEd;EACAA,KAAK;IACH,IAAG,CAAC,IAAI,CAACP,YAAY,EAAC;MACpB,IAAI,CAACR,MAAM,CAACgB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;EAEpC;EAEAC,aAAa,CAACC,OAA0B;IACtC,IAAI,CAACC,kBAAkB,GAACD,OAAO;EACjC;EAEAR,4BAA4B;IAC1B,IAAG,IAAI,CAACF,YAAY,EAAC;MACrB,IAAI,CAACN,UAAU,CAACkB,sBAAsB,EAAE,CAACC,SAAS,CAChDC,QAAQ,IAAG;QACT,IAAI,CAACC,mBAAmB,GAACD,QAAQ;MACnC,CAAC,EACAE,KAAK,IAAI;QACRb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;QAClB,IAAG,IAAI,CAACrB,YAAY,CAACI,OAAO,EAAE,IAAE,cAAc,EAAC;UAC7C,IAAI,CAACO,WAAW,GAAC,KAAK;UACxBH,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;;MAEpC,CAAC,CACF;;EAEH;EACAa,sBAAsB,CAACC,MAAc;IACnC,IAAI,CAACxB,UAAU,CAACyB,kBAAkB,CAACD,MAAM,CAAC,CAACL,SAAS,CACjDF,kBAAsC,IAAI;MACzC,IAAI,CAACA,kBAAkB,GAAEA,kBAAkB;IAC7C,CAAC,EACAK,KAAS,IAAI;MACZb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;IACpB,CAAC,CAAC;EAEN;EAEAI,uBAAuB;IACrB;IACA,IAAI,CAAC1B,UAAU,CAAC0B,uBAAuB,CAAC,IAAI,CAACT,kBAAkB,CAAC,CAACE,SAAS,CAACQ,QAAQ,IAAG;MACpF,IAAI,CAACV,kBAAkB,GAAC,IAAI;MAC5B,IAAI,CAACT,4BAA4B,EAAE;MACnCC,OAAO,CAACC,GAAG,CAACiB,QAAQ,CAAC;MACrB,IAAI,CAAC7B,MAAM,CAACgB,QAAQ,CAAC,CAAC,sBAAsB,CAAC,CAAC;IAChD,CAAC,EACAQ,KAAK,IAAG;MACPb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;MAClB,IAAGA,KAAK,CAACM,MAAM,KAAG,GAAG,EAAC;QACtBnB,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;;IAEpC,CAAC,CAEA;EACH;CAED;AA9EYd,2BAA2B,eALvCD,SAAS,CAAC;EACTkC,QAAQ,EAAE,yBAAyB;EACnCC,WAAW,EAAE,sCAAsC;EACnDC,SAAS,EAAE,CAAC,sCAAsC;CACnD,CAAC,GACWnC,2BAA2B,CA8EvC;SA9EYA,2BAA2B","names":["Component","ApplicationRequestComponent","constructor","router","route","apiService","tokenService","ngOnInit","isLoading","currentuserrole","getRole","isAutherised","getToken","getPendingApplicationRequest","console","log","getname","userhasrole","redrr","navigate","selectRequest","request","applicationRequest","getPendingApplications","subscribe","requests","applicationRequests","error","getApplicationByUserID","userId","getApplicationById","updateApplicationStatus","response","status","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\RideSharingPlatform\\RideSharingPlatform-main\\Frontend\\ridesharingplatform\\src\\app\\UserVerification\\application-request\\application-request.component.ts"],"sourcesContent":["import { Component, EventEmitter, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport{ ApplicationRequest } from '../models/model.applicationrequest';\nimport { ApiService } from '../api.service';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { NavComponent } from 'src/app/nav/nav.component';\nimport { TokenService } from 'src/app/app.tokenservice';\n\n\n@Component({\n  selector: 'app-application-request',\n  templateUrl: './application-request.component.html',\n  styleUrls: ['./application-request.component.scss']\n})\nexport class ApplicationRequestComponent implements OnInit{\n  applicationRequest:ApplicationRequest;\n  applicationRequests:ApplicationRequest[];\n  statusOptions: string[];\n  isAutherised:boolean;\n  userhasrole:boolean = true;\n  currentuserrole:string;\n  isLoading:boolean;\n  \n\n  constructor(private router: Router,private route: ActivatedRoute, private apiService: ApiService,private tokenService: TokenService){}\n\n  ngOnInit(): void {\n    this.isLoading=true;\n    this.currentuserrole=this.tokenService.getRole();\n    this.isAutherised=this.tokenService.getToken() != null;\n    this.getPendingApplicationRequest();\n    console.log(this.tokenService.getname())\n    this.isLoading=false;\n    this.userhasrole=this.currentuserrole=='SecurityHead';\n    this.redrr();\n  \n  }\n  redrr(){\n    if(!this.isAutherised){\n      this.router.navigate(['/login'])\n    }\n  }\n\n  selectRequest(request:ApplicationRequest){\n    this.applicationRequest=request;\n  }\n\n  getPendingApplicationRequest(){\n    if(this.isAutherised){\n    this.apiService.getPendingApplications().subscribe(\n      requests =>{\n        this.applicationRequests=requests;\n      },\n      (error) =>{ \n        console.log(error);\n        if(this.tokenService.getRole()!=\"SecurityHead\"){\n          this.userhasrole=false;\n        console.log(\"User Not Authorized\");\n        }\n      }\n    );\n  }\n  }\n  getApplicationByUserID(userId: number): void{\n    this.apiService.getApplicationById(userId).subscribe(\n      (applicationRequest: ApplicationRequest) => {\n        this.applicationRequest =applicationRequest;\n      },\n      (error:any) => {\n        console.log(error);\n      });\n    \n  }\n\n  updateApplicationStatus():void{\n    //this.applicationRequest.applicationStatus = status;\n    this.apiService.updateApplicationStatus(this.applicationRequest).subscribe(response => {\n      this.applicationRequest=null;\n      this.getPendingApplicationRequest();\n      console.log(response);\n      this.router.navigate(['/application-request'])\n    },\n    (error)=>{\n      console.log(error);\n      if(error.status===401){\n      console.log(\"User Not Authorized\");\n      }\n    }\n\n    )\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}