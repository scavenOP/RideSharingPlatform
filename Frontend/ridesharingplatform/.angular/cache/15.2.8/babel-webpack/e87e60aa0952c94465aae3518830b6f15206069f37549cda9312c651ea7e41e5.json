{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:7083/api'; // change this to your API URL\n  }\n\n  getCompanies() {\n    return this.http.get(`${this.apiUrl}/companies`).pipe(catchError(this.handleError));\n  }\n  createApplication(applicationData) {\n    return this.http.post(`${this.apiUrl}/applications/new`, applicationData).pipe(catchError(this.handleError));\n  }\n  getPendingApplications() {\n    return this.http.get(`${this.apiUrl}/applications`).pipe(catchError(this.handleError));\n  }\n  updateApplicationStatus(applicationId, status) {\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    const body = {\n      id: applicationId,\n      status: status\n    };\n    return this.http.put(`${this.apiUrl}/applications/approvereject`, body, {\n      headers: headers\n    }).pipe(catchError(this.handleError));\n  }\n  getApplicationById(applicationId) {\n    return this.http.get(`${this.apiUrl}/applications/${applicationId}`).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'An error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side errors\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side errors\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(errorMessage);\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAwCA,WAAW,QAAQ,sBAAsB;AACjF,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAK3C,OAAM,MAAOC,UAAU;EAGrBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,2BAA2B,CAAC,CAAC;EAEP;;EAEvCC,YAAY;IACV,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAM,GAAG,IAAI,CAACC,MAAM,YAAY,CAAC,CAClDC,IAAI,CACHP,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,CAC7B;EACL;EAEAC,iBAAiB,CAACC,eAAoB;IACpC,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAM,GAAG,IAAI,CAACL,MAAM,mBAAmB,EAAEI,eAAe,CAAC,CAC3EH,IAAI,CACHP,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,CAC7B;EACL;EAEAI,sBAAsB;IACpB,OAAO,IAAI,CAACT,IAAI,CAACE,GAAG,CAAM,GAAG,IAAI,CAACC,MAAM,eAAe,CAAC,CACrDC,IAAI,CACHP,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,CAC7B;EACL;EAEAK,uBAAuB,CAACC,aAAqB,EAAEC,MAAc;IAC3D,MAAMC,OAAO,GAAG,IAAIlB,WAAW,EAAE,CAACmB,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACzE,MAAMC,IAAI,GAAG;MAAEC,EAAE,EAAEL,aAAa;MAAEC,MAAM,EAAEA;IAAM,CAAE;IAClD,OAAO,IAAI,CAACZ,IAAI,CAACiB,GAAG,CAAM,GAAG,IAAI,CAACd,MAAM,6BAA6B,EAAEY,IAAI,EAAE;MAAEF,OAAO,EAAEA;IAAO,CAAE,CAAC,CAC/FT,IAAI,CACHP,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,CAC7B;EACL;EAEAa,kBAAkB,CAACP,aAAqB;IACtC,OAAO,IAAI,CAACX,IAAI,CAACE,GAAG,CAAM,GAAG,IAAI,CAACC,MAAM,iBAAiBQ,aAAa,EAAE,CAAC,CACtEP,IAAI,CACHP,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,CAC7B;EACL;EAEQA,WAAW,CAACc,KAAwB;IAC1C,IAAIC,YAAY,GAAG,mBAAmB;IACtC,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC/C,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACP,MAAM,cAAcO,KAAK,CAACG,OAAO,EAAE;;IAEzEC,OAAO,CAACJ,KAAK,CAACC,YAAY,CAAC;IAC3B,OAAOxB,UAAU,CAACwB,YAAY,CAAC;EACjC;;AArDWtB,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAA0B,SAAV1B,UAAU;EAAA2B,YAFT;AAAM","names":["HttpHeaders","throwError","catchError","ApiService","constructor","http","getCompanies","get","apiUrl","pipe","handleError","createApplication","applicationData","post","getPendingApplications","updateApplicationStatus","applicationId","status","headers","set","body","id","put","getApplicationById","error","errorMessage","ErrorEvent","message","console","factory","providedIn"],"sourceRoot":"","sources":["D:\\projects\\idp\\Frontend\\ridesharingplatform\\src\\app\\UserVerification\\newapplication\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n  private apiUrl = 'http://localhost:7083/api'; // change this to your API URL\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getCompanies(): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/companies`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  createApplication(applicationData: any): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/applications/new`, applicationData)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getPendingApplications(): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/applications`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateApplicationStatus(applicationId: number, status: string): Observable<any> {\r\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n    const body = { id: applicationId, status: status };\r\n    return this.http.put<any>(`${this.apiUrl}/applications/approvereject`, body, { headers: headers })\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getApplicationById(applicationId: number): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/applications/${applicationId}`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    let errorMessage = 'An error occurred';\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side errors\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      // Server-side errors\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    console.error(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}