{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../UserVerification/api.service\";\nimport * as i2 from \"../app.tokenservice\";\nexport class LoginComponent {\n  constructor(loginService, tokenservice) {\n    this.loginService = loginService;\n    this.tokenservice = tokenservice;\n  }\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  onSubmit() {\n    this.isLoading = true;\n    const email = this.loginForm.controls['email'].value;\n    const password = this.loginForm.controls['password'].value;\n    this.loginService.login(email, password).subscribe(response => {\n      // localStorage.setItem('token', response.token);\n      // localStorage.setItem('username', response.name);\n      // close the modal on successful login\n      console.log(response.token);\n      this.tokenservice.setname(response.name);\n      this.tokenservice.setToken(response.token);\n      this.tokenservice.setRole(response.role);\n      //this.currentUser=this.tokenservice.getname();\n      //document.getElementById('closeModal').click();\n      this.isLoading = false;\n    }, error => {\n      this.errorMessage = error.message;\n      console.log(error);\n      this.isLoading = false;\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.TokenService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 2,\n  vars: 0,\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"login works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAoBA,UAAU,QAAQ,gBAAgB;;;;AAStD,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,YAAwB,EAASC,YAA0B;IAA3D,iBAAY,GAAZD,YAAY;IAAqB,iBAAY,GAAZC,YAAY;EAAgB;EAMjFC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACC,WAAW,CAACC,KAAK,CAAC;MACtCC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACT,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACS,KAAK,CAAC,CAAC;MACpDE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACY,SAAS,CAAC,CAAC,CAAC,CAAC;KAC9D,CAAC;EACJ;EAEAC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAC,IAAI;IACnB,MAAML,KAAK,GAAG,IAAI,CAACH,SAAS,CAACS,QAAQ,CAAC,OAAO,CAAC,CAACC,KAAK;IACpD,MAAML,QAAQ,GAAG,IAAI,CAACL,SAAS,CAACS,QAAQ,CAAC,UAAU,CAAC,CAACC,KAAK;IAC1D,IAAI,CAACb,YAAY,CAACc,KAAK,CAACR,KAAK,EAAEE,QAAQ,CAAC,CAACO,SAAS,CAChDC,QAAQ,IAAG;MACT;MACA;MACA;MACAC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,KAAK,CAAC;MAC3B,IAAI,CAAClB,YAAY,CAACmB,OAAO,CAACJ,QAAQ,CAACK,IAAI,CAAC;MACxC,IAAI,CAACpB,YAAY,CAACqB,QAAQ,CAACN,QAAQ,CAACG,KAAK,CAAC;MAC1C,IAAI,CAAClB,YAAY,CAACsB,OAAO,CAACP,QAAQ,CAACQ,IAAI,CAAC;MACxC;MACA;MACA,IAAI,CAACb,SAAS,GAAC,KAAK;IACtB,CAAC,EACDc,KAAK,IAAG;MACN,IAAI,CAACC,YAAY,GAAGD,KAAK,CAACE,OAAO;MACjCV,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC;MAClB,IAAI,CAACd,SAAS,GAAC,KAAK;IACtB,CAAC,CACF;EACH;;AArCWb,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAA8B;EAAAC;EAAAC;EAAAC;IAAA;MCV3BC,yBAAG;MAAAA,4BAAY;MAAAA,iBAAI","names":["Validators","LoginComponent","constructor","loginService","tokenservice","ngOnInit","loginForm","formBuilder","group","email","required","password","minLength","onSubmit","isLoading","controls","value","login","subscribe","response","console","log","token","setname","name","setToken","setRole","role","error","errorMessage","message","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\RideSharingPlatform\\RideSharingPlatform-main\\Frontend\\ridesharingplatform\\src\\app\\login\\login.component.ts","C:\\RideSharingPlatform\\RideSharingPlatform-main\\Frontend\\ridesharingplatform\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nimport { TokenService } from '../app.tokenservice';\nimport { ApiService } from '../UserVerification/api.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit{\n  constructor(private loginService: ApiService,private tokenservice: TokenService){}\n  loginForm: FormGroup;\n  formBuilder: any;\n  isLoading:boolean;\n  errorMessage:string;\n\n  ngOnInit(): void {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  onSubmit() {\n    this.isLoading=true;\n    const email = this.loginForm.controls['email'].value;\n    const password = this.loginForm.controls['password'].value;\n    this.loginService.login(email, password).subscribe(\n      response => {\n        // localStorage.setItem('token', response.token);\n        // localStorage.setItem('username', response.name);\n        // close the modal on successful login\n        console.log(response.token);\n        this.tokenservice.setname(response.name);\n        this.tokenservice.setToken(response.token);\n        this.tokenservice.setRole(response.role);\n        //this.currentUser=this.tokenservice.getname();\n        //document.getElementById('closeModal').click();\n        this.isLoading=false;\n      },\n      error => {\n        this.errorMessage = error.message;\n        console.log(error);\n        this.isLoading=false;\n      }\n    );\n  }\n\n\n}\n","<p>login works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}