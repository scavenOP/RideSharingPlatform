{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../UserVerification/api.service\";\nimport * as i4 from \"../app.tokenservice\";\nimport * as i5 from \"../nav/nav.component\";\nimport * as i6 from \"@angular/common\";\nfunction LoginComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nfunction LoginComponent_span_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 12);\n  }\n}\nexport class LoginComponent {\n  constructor(route, router, formBuilder, loginService, tokenservice, navComponent) {\n    this.route = route;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.loginService = loginService;\n    this.tokenservice = tokenservice;\n    this.navComponent = navComponent;\n  }\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  onSubmit() {\n    this.isLoading = true;\n    const email = this.loginForm.controls['email'].value;\n    const password = this.loginForm.controls['password'].value;\n    this.loginService.login(email, password).subscribe(response => {\n      // localStorage.setItem('token', response.token);\n      // localStorage.setItem('username', response.name);\n      // close the modal on successful login\n      console.log(response.token);\n      this.tokenservice.setname(response.name);\n      this.tokenservice.setToken(response.token);\n      this.tokenservice.setRole(response.role);\n      this.tokenservice.setid(response.id);\n      console.log(this.tokenservice.getid());\n      console.log(\"name:\" + this.tokenservice.getname());\n      //console.log(this.tokenservice.getname());\n      this.navComponent.currentUser = this.tokenservice.getname();\n      //document.getElementById('closeModal').click();\n      this.navComponent.currentuserrole = this.tokenservice.getRole();\n      console.log(\"role\" + this.navComponent.currentuserrole);\n      this.isLoading = false;\n      const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n      this.router.navigate([returnUrl]);\n    }, error => {\n      this.errorMessage = error.message;\n      console.log(error);\n      this.isLoading = false;\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ApiService), i0.ɵɵdirectiveInject(i4.TokenService), i0.ɵɵdirectiveInject(i5.NavComponent));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 16,\n  vars: 4,\n  consts: [[\"id\", \"loginModalLabel\", 1, \"text-center\", \"mb-4\"], [1, \"modal-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"emailInput\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"emailInput\", \"formControlName\", \"email\", \"placeholder\", \"Enter email\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"passwordInput\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"passwordInput\", \"formControlName\", \"password\", \"placeholder\", \"Password\", \"required\", \"\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm mr-1\", 4, \"ngIf\"], [1, \"text-danger\"], [1, \"spinner-border\", \"spinner-border-sm\", \"mr-1\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h5\", 0);\n      i0.ɵɵtext(1, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 1)(3, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"label\", 4);\n      i0.ɵɵtext(6, \"Email address\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 3)(9, \"label\", 6);\n      i0.ɵɵtext(10, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(12, LoginComponent_div_12_Template, 2, 1, \"div\", 8);\n      i0.ɵɵelementStart(13, \"button\", 9);\n      i0.ɵɵtemplate(14, LoginComponent_span_14_Template, 1, 0, \"span\", 10);\n      i0.ɵɵtext(15, \" Login\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.isLoading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n    }\n  },\n  dependencies: [i6.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"form[_ngcontent-%COMP%] {\\n  min-width: 300px;\\n  max-width: 400px;\\n  padding: 20px;\\n  margin: 0 auto;\\n  background: #70e1f5;\\n  background: linear-gradient(to right, #ffd194, #70e1f5);\\n  box-shadow: 3px 3px 23px -9px rgba(0, 0, 0, 0.86);\\n}\\n\\nform[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\n  border: 1px solid #eee;\\n  border-radius: 0 !important;\\n  padding: 5px 8px;\\n  color: #444;\\n}\\n\\nform[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n  margin-top: 20px;\\n}\\n\\n.pull-right[_ngcontent-%COMP%] {\\n  float: right;\\n}\\n\\n.cont[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 0px;\\n  right: 0px;\\n  bottom: 0px;\\n  left: 0px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LnNjc3MiLCJ3ZWJwYWNrOi8vLi8uLi8uLi8uLi8uLi8uLi8uLi9hY2VyJTIwcGMvRG9jdW1lbnRzL0dpdEh1Yi9SaWRlU2hhcmluZ1BsYXRmb3JtL0Zyb250ZW5kL3JpZGVzaGFyaW5ncGxhdGZvcm0vc3JjL2FwcC9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGdCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxhQUFBO0VBQ0EsY0FBQTtFQUNBLG1CQUFBO0VBRUYsdURBQUE7RUFHRSxpREFBQTtBQ0NKOztBREVFO0VBQ0Usc0JBQUE7RUFDQSwyQkFBQTtFQUNBLGdCQUFBO0VBQ0EsV0FBQTtBQ0NKOztBREVFO0VBQ0UsZ0JBQUE7QUNDSjs7QURJRTtFQUNFLFlBQUE7QUNESjs7QURHRTtFQUNFLGtCQUFBO0VBQ0EsUUFBQTtFQUNBLFVBQUE7RUFDQSxXQUFBO0VBQ0EsU0FBQTtBQ0FKIiwic291cmNlc0NvbnRlbnQiOlsiZm9ybSB7XHJcbiAgICBtaW4td2lkdGg6MzAwcHg7XHJcbiAgICBtYXgtd2lkdGg6NDAwcHg7XHJcbiAgICBwYWRkaW5nOjIwcHg7XHJcbiAgICBtYXJnaW46MCBhdXRvO1xyXG4gICAgYmFja2dyb3VuZDogIzcwZTFmNTtcclxuICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudCh0byByaWdodCwgI2ZmZDE5NCwgIzcwZTFmNSk7ICBcclxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNmZmQxOTQsICM3MGUxZjUpO1xyXG4gICAgLXdlYmtpdC1ib3gtc2hhZG93OiAzcHggM3B4IDIzcHggLTlweCByZ2JhKDAsMCwwLDAuODYpO1xyXG4gICAgLW1vei1ib3gtc2hhZG93OiAzcHggM3B4IDIzcHggLTlweCByZ2JhKDAsMCwwLDAuODYpO1xyXG4gICAgYm94LXNoYWRvdzogM3B4IDNweCAyM3B4IC05cHggcmdiYSgwLDAsMCwwLjg2KTtcclxuICB9XHJcbiAgXHJcbiAgZm9ybSBpbnB1dCB7XHJcbiAgICBib3JkZXI6MXB4IHNvbGlkICNlZWU7XHJcbiAgICBib3JkZXItcmFkaXVzOjAgIWltcG9ydGFudDtcclxuICAgIHBhZGRpbmc6NXB4IDhweDtcclxuICAgIGNvbG9yOiM0NDQ7XHJcbiAgfVxyXG4gIFxyXG4gIGZvcm0gYnV0dG9uIHtcclxuICAgIG1hcmdpbi10b3A6MjBweDtcclxuICB9XHJcbiAgXHJcbiAgXHJcbiAgXHJcbiAgLnB1bGwtcmlnaHQge1xyXG4gICAgZmxvYXQ6cmlnaHQ7XHJcbiAgfVxyXG4gIC5jb250e1xyXG4gICAgcG9zaXRpb246YWJzb2x1dGU7XHJcbiAgICB0b3A6MHB4O1xyXG4gICAgcmlnaHQ6MHB4O1xyXG4gICAgYm90dG9tOjBweDtcclxuICAgIGxlZnQ6MHB4O1xyXG4gICAgXHJcbiAgfSIsImZvcm0ge1xuICBtaW4td2lkdGg6IDMwMHB4O1xuICBtYXgtd2lkdGg6IDQwMHB4O1xuICBwYWRkaW5nOiAyMHB4O1xuICBtYXJnaW46IDAgYXV0bztcbiAgYmFja2dyb3VuZDogIzcwZTFmNTtcbiAgYmFja2dyb3VuZDogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNmZmQxOTQsICM3MGUxZjUpO1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNmZmQxOTQsICM3MGUxZjUpO1xuICAtd2Via2l0LWJveC1zaGFkb3c6IDNweCAzcHggMjNweCAtOXB4IHJnYmEoMCwgMCwgMCwgMC44Nik7XG4gIC1tb3otYm94LXNoYWRvdzogM3B4IDNweCAyM3B4IC05cHggcmdiYSgwLCAwLCAwLCAwLjg2KTtcbiAgYm94LXNoYWRvdzogM3B4IDNweCAyM3B4IC05cHggcmdiYSgwLCAwLCAwLCAwLjg2KTtcbn1cblxuZm9ybSBpbnB1dCB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNlZWU7XG4gIGJvcmRlci1yYWRpdXM6IDAgIWltcG9ydGFudDtcbiAgcGFkZGluZzogNXB4IDhweDtcbiAgY29sb3I6ICM0NDQ7XG59XG5cbmZvcm0gYnV0dG9uIHtcbiAgbWFyZ2luLXRvcDogMjBweDtcbn1cblxuLnB1bGwtcmlnaHQge1xuICBmbG9hdDogcmlnaHQ7XG59XG5cbi5jb250IHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDBweDtcbiAgcmlnaHQ6IDBweDtcbiAgYm90dG9tOiAwcHg7XG4gIGxlZnQ6IDBweDtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","LoginComponent","constructor","route","router","formBuilder","loginService","tokenservice","navComponent","ngOnInit","loginForm","group","email","required","password","minLength","onSubmit","isLoading","controls","value","login","subscribe","response","console","log","token","setname","name","setToken","setRole","role","setid","id","getid","getname","currentUser","currentuserrole","getRole","returnUrl","snapshot","queryParams","navigate","error","errorMessage","message","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\acer pc\\Documents\\GitHub\\RideSharingPlatform\\Frontend\\ridesharingplatform\\src\\app\\login\\login.component.ts","C:\\Users\\acer pc\\Documents\\GitHub\\RideSharingPlatform\\Frontend\\ridesharingplatform\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute,Router } from '@angular/router';\r\nimport { TokenService } from '../app.tokenservice';\r\nimport { NavComponent } from '../nav/nav.component';\r\nimport { ApiService } from '../UserVerification/api.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit{\r\n  \r\n  loginForm: FormGroup;\r\n  //formBuilder: any;\r\n  isLoading:boolean;\r\n  errorMessage:string;\r\n  constructor(private route: ActivatedRoute,private router: Router,private formBuilder: FormBuilder,private loginService: ApiService,private tokenservice: TokenService,private navComponent: NavComponent){}\r\n  ngOnInit(): void {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]]\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.isLoading=true;\r\n    const email = this.loginForm.controls['email'].value;\r\n    const password = this.loginForm.controls['password'].value;\r\n    this.loginService.login(email, password).subscribe(\r\n      response => {\r\n        // localStorage.setItem('token', response.token);\r\n        // localStorage.setItem('username', response.name);\r\n        // close the modal on successful login\r\n        console.log(response.token);\r\n        this.tokenservice.setname(response.name);\r\n        this.tokenservice.setToken(response.token);\r\n        this.tokenservice.setRole(response.role);\r\n        this.tokenservice.setid(response.id);\r\n        console.log(this.tokenservice.getid());\r\n        console.log(\"name:\" +this.tokenservice.getname());\r\n        //console.log(this.tokenservice.getname());\r\n        this.navComponent.currentUser=this.tokenservice.getname();\r\n        //document.getElementById('closeModal').click();\r\n        this.navComponent.currentuserrole=this.tokenservice.getRole();\r\n        console.log(\"role\"+this.navComponent.currentuserrole)\r\n        this.isLoading=false;\r\n        const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n        this.router.navigate([returnUrl]);\r\n      },\r\n      error => {\r\n        this.errorMessage = error.message;\r\n        console.log(error);\r\n        this.isLoading=false;\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n}\r\n","\r\n    <h5 class=\"text-center mb-4\" id=\"loginModalLabel\">Login</h5>\r\n    \r\n  \r\n  <div class=\"modal-body\">\r\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n      <div class=\"mb-3\">\r\n        <label for=\"emailInput\" class=\"form-label\">Email address</label>\r\n        <input type=\"email\" class=\"form-control\" id=\"emailInput\" formControlName=\"email\" placeholder=\"Enter email\" required>\r\n      </div>\r\n      <div class=\"mb-3\">\r\n        <label for=\"passwordInput\" class=\"form-label\">Password</label>\r\n        <input type=\"password\" class=\"form-control\" id=\"passwordInput\" formControlName=\"password\" placeholder=\"Password\"  required>\r\n      </div>\r\n      <div *ngIf=\"errorMessage\" class=\"text-danger\">{{ errorMessage }}</div>\r\n\r\n      <button type=\"submit\" [disabled]=\"isLoading\" class=\"btn btn-primary\">\r\n        <span *ngIf=\"isLoading\"  class=\"spinner-border spinner-border-sm mr-1\"></span>   Login</button>\r\n      \r\n    </form>\r\n    </div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}