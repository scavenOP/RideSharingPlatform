{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"./api.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common/http\";\nimport * as i5 from \"src/app/app.tokenservice\";\nimport * as i6 from \"@angular/common\";\nfunction AddvehicleComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\", 1);\n    i0.ɵɵtext(2, \"Application Submitted\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AddvehicleComponent_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 2)(2, \"div\", 3)(3, \"span\", 4);\n    i0.ɵɵtext(4, \"Loading....\");\n    i0.ɵɵelementEnd()()()();\n  }\n}\nfunction AddvehicleComponent_div_1_div_2_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.errorMessage);\n  }\n}\nfunction AddvehicleComponent_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\", 1);\n    i0.ɵɵtext(2, \"New Vehicle Application\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, AddvehicleComponent_div_1_div_2_div_3_Template, 2, 1, \"div\", 5);\n    i0.ɵɵelementStart(4, \"form\", 6);\n    i0.ɵɵlistener(\"ngSubmit\", function AddvehicleComponent_div_1_div_2_Template_form_ngSubmit_4_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.onSubmit());\n    });\n    i0.ɵɵelementStart(5, \"div\", 7)(6, \"label\", 8);\n    i0.ɵɵtext(7, \"Registration No:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"input\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"button\", 10);\n    i0.ɵɵtext(10, \"Reset\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"button\", 11);\n    i0.ɵɵtext(12, \"Submit\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.errorMessage != \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r3.newvehicle);\n  }\n}\nfunction AddvehicleComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, AddvehicleComponent_div_1_div_1_Template, 5, 0, \"div\", 0);\n    i0.ɵɵtemplate(2, AddvehicleComponent_div_1_div_2_Template, 13, 2, \"div\", 0);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.isLoading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.isLoading);\n  }\n}\nexport class AddvehicleComponent {\n  constructor(formBuilder, dataService, router, http, tokenService) {\n    this.formBuilder = formBuilder;\n    this.dataService = dataService;\n    this.router = router;\n    this.http = http;\n    this.tokenService = tokenService;\n    this.vehicletype = [];\n    this.isLoading = false;\n    this.errorMessage = \"\";\n  }\n  ngOnInit() {\n    this.isLoading = true;\n    this.newvehicle = new FormGroup({\n      registrationNo: new FormControl('', Validators.required),\n      belongsToUserId: new FormControl(this.tokenService.getid, Validators.required),\n      vehicleTypeId: new FormControl('', Validators.required),\n      inspectionStatus: new FormControl('pending', Validators.required),\n      rtoName: new FormControl('', Validators.required),\n      registrationDate: new FormControl(new Date(), Validators.required),\n      registrationExpiresOn: new FormControl(new Date(), Validators.required),\n      rcDocURL: new FormControl('', Validators.required),\n      insuranceCompanyName: new FormControl('', Validators.required),\n      insuranceNo: new FormControl('', Validators.required),\n      insurancedOn: new FormControl(new Date(), Validators.required),\n      insuranceExpiresOn: new FormControl(new Date(), Validators.required),\n      insuranceCertificateDOCURL: new FormControl('', Validators.required),\n      pucCertificateNo: new FormControl(Validators.required),\n      pucIssuedOn: new FormControl(new Date(), Validators.required),\n      pucValidUntil: new FormControl(new Date(), Validators.required),\n      pucdocurl: new FormControl('', Validators.required)\n    });\n    this.submitted = false;\n    // Fetch the list of companies from the API\n    this.dataService.getVehicleTypes().subscribe(response => {\n      this.vehicletype = response;\n      this.isLoading = false;\n      //console.log(this.tokenService.getToken());\n    });\n  }\n\n  onSubmit() {\n    // if (this.newapplication.invalid) {\n    //   return;\n    // }\n    //   console.log(this.newapplication.value)\n    // this.dataService.createApplication(this.newapplication.value).subscribe(response => {\n    //     console.log(response);\n    //     // show acknowledgement message here\n    //     this.submitted=true;\n    //   }, error => {\n    //     console.log(error);\n    //     // show error message here\n    //   });\n    console.log(\"done\");\n  }\n}\nAddvehicleComponent.ɵfac = function AddvehicleComponent_Factory(t) {\n  return new (t || AddvehicleComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.VehicleApiService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.HttpClient), i0.ɵɵdirectiveInject(i5.TokenService));\n};\nAddvehicleComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddvehicleComponent,\n  selectors: [[\"app-addvehicle\"]],\n  decls: 2,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [1, \"text-center\", \"mb-4\"], [1, \"d-flex\", \"justify-content-center\", \"align-items-center\", 2, \"height\", \"100vh\"], [\"role\", \"status\", 1, \"spinner-border\"], [1, \"visually-hidden\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"registrationNo\"], [\"type\", \"text\", \"id\", \"registrationNo\", \"formControlName\", \"registrationNo\", \"required\", \"\", 1, \"form-control\"], [\"type\", \"reset\", 1, \"btn\", \"btn-primary\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 2, \"float\", \"right\"], [1, \"alert\", \"alert-danger\"]],\n  template: function AddvehicleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, AddvehicleComponent_div_0_Template, 3, 0, \"div\", 0);\n      i0.ɵɵtemplate(1, AddvehicleComponent_div_1_Template, 3, 2, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.submitted);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.submitted);\n    }\n  },\n  dependencies: [i6.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","FormControl","Validators","i0","AddvehicleComponent","constructor","formBuilder","dataService","router","http","tokenService","ngOnInit","isLoading","newvehicle","registrationNo","required","belongsToUserId","getid","vehicleTypeId","inspectionStatus","rtoName","registrationDate","Date","registrationExpiresOn","rcDocURL","insuranceCompanyName","insuranceNo","insurancedOn","insuranceExpiresOn","insuranceCertificateDOCURL","pucCertificateNo","pucIssuedOn","pucValidUntil","pucdocurl","submitted","getVehicleTypes","subscribe","response","vehicletype","onSubmit","console","log","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\acer pc\\Documents\\GitHub\\RideSharingPlatform\\Frontend\\ridesharingplatform\\src\\app\\VehicleManagement\\addvehicle\\addvehicle.component.ts","C:\\Users\\acer pc\\Documents\\GitHub\\RideSharingPlatform\\Frontend\\ridesharingplatform\\src\\app\\VehicleManagement\\addvehicle\\addvehicle.component.html"],"sourcesContent":["import { Component, ElementRef, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl, Validators, NgForm, ValidatorFn, AbstractControl } from '@angular/forms';\nimport { Router } from '@angular/router';\n\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { TokenService } from 'src/app/app.tokenservice';\nimport { VehicleApiService } from './api.service';\n\n@Component({\n  selector: 'app-addvehicle',\n  templateUrl: './addvehicle.component.html',\n  styleUrls: ['./addvehicle.component.scss']\n})\nexport class AddvehicleComponent {\n\n  newvehicle: FormGroup;\n  vehicletype: any[] = [];\n  isLoading = false;\n  submitted: boolean;\n\n  errorMessage: string = \"\";\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private dataService: VehicleApiService,\n    private router: Router,\n    private http: HttpClient,\n    private tokenService: TokenService\n  ) { }\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.newvehicle = new FormGroup({\n      registrationNo: new FormControl('', Validators.required),\n      belongsToUserId: new FormControl(this.tokenService.getid, Validators.required),\n      vehicleTypeId: new FormControl('',Validators.required),\n      inspectionStatus: new FormControl('pending', Validators.required),\n      rtoName: new FormControl('', Validators.required),\n      registrationDate: new FormControl(new Date, Validators.required),\n      registrationExpiresOn: new FormControl(new Date, Validators.required),\n      rcDocURL: new FormControl('', Validators.required),\n      insuranceCompanyName: new FormControl('', Validators.required),\n      insuranceNo: new FormControl('', Validators.required),\n      insurancedOn: new FormControl(new Date, Validators.required),\n      insuranceExpiresOn: new FormControl(new Date, Validators.required),\n      insuranceCertificateDOCURL: new FormControl('', Validators.required),\n      pucCertificateNo: new FormControl(Validators.required),\n      pucIssuedOn: new FormControl(new Date, Validators.required),\n      pucValidUntil: new FormControl(new Date, Validators.required),\n      pucdocurl: new FormControl('', Validators.required)\n    });\n    this.submitted = false;\n\n    // Fetch the list of companies from the API\n    this.dataService.getVehicleTypes().subscribe((response: any[]) => {\n\n\n      this.vehicletype = response;\n      this.isLoading = false;\n      //console.log(this.tokenService.getToken());\n\n    });\n\n  }\n\n  onSubmit(): void {\n    // if (this.newapplication.invalid) {\n    //   return;\n    // }\n  //   console.log(this.newapplication.value)\n  // this.dataService.createApplication(this.newapplication.value).subscribe(response => {\n  //     console.log(response);\n  //     // show acknowledgement message here\n  //     this.submitted=true;\n  //   }, error => {\n  //     console.log(error);\n  //     // show error message here\n  //   });\n  console.log(\"done\");\n\n}\n\n}\n","<div *ngIf=\"submitted\">\n    <h2 class=\"text-center mb-4\">Application Submitted</h2>\n  </div>\n  <div *ngIf=\"!submitted\">\n    <div *ngIf=\"isLoading\">\n      <div class=\"d-flex justify-content-center align-items-center\" style=\"height: 100vh;\">\n        <div class=\"spinner-border\" role=\"status\">\n          <span class=\"visually-hidden\">Loading....</span>\n  \n        </div>\n      </div>\n    </div>\n    <div *ngIf=\"!isLoading\">\n      <h2 class=\"text-center mb-4\">New Vehicle Application</h2>\n      <div *ngIf=\"errorMessage!=''\" class=\"alert alert-danger\">{{ errorMessage }}</div>\n      <form [formGroup]=\"newvehicle\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"form-group\">\n          <label for=\"registrationNo\">Registration No:</label>\n          <input type=\"text\" class=\"form-control\" id=\"registrationNo\" formControlName=\"registrationNo\" required />\n  \n        </div>\n        \n        <button type=\"reset\" class=\"btn btn-primary\">Reset</button>\n        <button type=\"submit\" class=\"btn btn-primary\" style=\"float:right\">Submit</button>\n      </form>\n    </div>\n  </div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}