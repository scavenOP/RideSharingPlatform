{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nlet NewapplicationComponent = class NewapplicationComponent {\n  constructor(formBuilder, dataService, router, http) {\n    this.formBuilder = formBuilder;\n    this.dataService = dataService;\n    this.router = router;\n    this.http = http;\n    this.companyList = [];\n    this.errorMessage = \"\";\n  }\n  validatePhoneNumber() {\n    return control => {\n      const phoneNumber = control.value;\n      if (phoneNumber && phoneNumber.length !== 10) {\n        return {\n          'phoneNumberInvalid': true\n        };\n      }\n      return null;\n    };\n  }\n  validatelicensenumber() {\n    return control => {\n      const phoneNumber = control.value;\n      const validPhoneNumber = /^[A-Za-z]{3}\\d{4}[A-Za-z]{3}$/; // regular expression for 10 digit phone number\n      return validPhoneNumber.test(phoneNumber) ? null : {\n        invalidlicenseno: true\n      };\n    };\n  }\n  ngOnInit() {\n    this.newapplication = new FormGroup({\n      username: new FormControl('', Validators.required),\n      password: new FormControl('', Validators.required),\n      officialEmail: new FormControl('', Validators.required),\n      phoneNumber: new FormControl('', [Validators.required, this.validatePhoneNumber()]),\n      designation: new FormControl('', Validators.required),\n      roleId: new FormControl('', Validators.required),\n      employeeeId: new FormControl('', Validators.required),\n      aadharNumber: new FormControl('', Validators.required),\n      applicationStatus: new FormControl('New'),\n      companyId: new FormControl('', Validators.required),\n      licenseNo: new FormControl(null, [this.validatelicensenumber()]),\n      expirationDate: new FormControl(new Date()),\n      rta: new FormControl(),\n      alowedVehicles: new FormControl()\n    });\n    // Fetch the list of companies from the API\n    this.dataService.getCompanies().subscribe(response => {\n      this.companyList = response;\n    });\n  }\n  // Handler for form submission\n  onSubmit() {\n    if (this.newapplication.invalid) {\n      return;\n    }\n    console.log(this.newapplication.value);\n    this.dataService.createApplication(this.newapplication.value).subscribe(response => {\n      console.log(response);\n      // show acknowledgement message here\n    }, error => {\n      console.log(error);\n      // show error message here\n    });\n  }\n};\n\nNewapplicationComponent = __decorate([Component({\n  selector: 'app-newapplication',\n  templateUrl: './newapplication.component.html',\n  styleUrls: ['./newapplication.component.scss']\n})], NewapplicationComponent);\nexport { NewapplicationComponent };","map":{"version":3,"mappings":"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","names":["Component","FormGroup","FormControl","Validators","NewapplicationComponent","constructor","formBuilder","dataService","router","http","validatePhoneNumber","control","phoneNumber","value","length","validatelicensenumber","validPhoneNumber","test","invalidlicenseno","ngOnInit","newapplication","username","required","password","officialEmail","designation","roleId","employeeeId","aadharNumber","applicationStatus","companyId","licenseNo","expirationDate","Date","rta","alowedVehicles","getCompanies","subscribe","response","companyList","onSubmit","invalid","console","log","createApplication","error","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\RideSharingPlatform\\RideSharingPlatform-main\\Frontend\\ridesharingplatform\\src\\app\\UserVerification\\newapplication\\newapplication.component.ts"],"sourcesContent":["\nimport { Component, ElementRef, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup,FormControl, Validators, NgForm, ValidatorFn, AbstractControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ApiService } from './api.service';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\n\n@Component({\n  selector: 'app-newapplication',\n  templateUrl: './newapplication.component.html',\n  styleUrls: ['./newapplication.component.scss']\n})\nexport class NewapplicationComponent implements OnInit {\n\n  newapplication: FormGroup ;\n  companyList: any[]=[];\n  \n  errorMessage: string=\"\";\n  \n  \n\n  constructor(\n    private formBuilder: FormBuilder,\n    private dataService: ApiService,\n    private router: Router,\n    private http: HttpClient\n  ) { }\n\n  validatePhoneNumber():ValidatorFn{\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const phoneNumber = control.value;\n      if (phoneNumber && phoneNumber.length !== 10) {\n        return { 'phoneNumberInvalid': true };\n      }\n      return null;\n    };\n    \n  }\n\n  validatelicensenumber():ValidatorFn{\n    return(control: AbstractControl): { [key: string]:any}|null =>{\n      const phoneNumber = control.value;\n      const validPhoneNumber = /^[A-Za-z]{3}\\d{4}[A-Za-z]{3}$/; // regular expression for 10 digit phone number\n      return validPhoneNumber.test(phoneNumber) ? null : { invalidlicenseno: true };\n    }\n  }\n\n  ngOnInit() {\n    this.newapplication = new FormGroup({\n      username: new FormControl('',Validators.required),\n      password: new FormControl('',Validators.required),\n      officialEmail: new FormControl('',Validators.required),\n      phoneNumber: new FormControl('',[Validators.required, this.validatePhoneNumber()]),\n      designation: new FormControl('',Validators.required),\n      roleId: new FormControl('',Validators.required),\n      employeeeId: new FormControl('',Validators.required),\n      aadharNumber: new FormControl('',Validators.required),\n      applicationStatus: new FormControl('New'),\n      companyId: new FormControl('',Validators.required),\n      licenseNo: new FormControl(null,[this.validatelicensenumber()]),\n      expirationDate: new FormControl(new Date),\n      rta: new FormControl(),\n      alowedVehicles: new FormControl(),\n    });\n\n    // Fetch the list of companies from the API\n    this.dataService.getCompanies().subscribe((response: any[]) => {\n    \n      \n      this.companyList = response;\n      \n    });\n  }\n  \n\n  // Handler for form submission\n  onSubmit(): void {\n    if (this.newapplication.invalid) {\n      return;\n    }\n    console.log(this.newapplication.value)\n  this.dataService.createApplication(this.newapplication.value).subscribe(response => {\n      console.log(response);\n      // show acknowledgement message here\n    }, error => {\n      console.log(error);\n      // show error message here\n    });\n  \n\n}\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}