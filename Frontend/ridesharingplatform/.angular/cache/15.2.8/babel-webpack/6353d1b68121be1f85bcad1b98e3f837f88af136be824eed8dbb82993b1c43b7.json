{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../UserVerification/api.service\";\nimport * as i4 from \"../app.tokenservice\";\nimport * as i5 from \"@angular/common\";\nfunction NavComponent_ng_container_21_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"li\", 8)(2, \"a\", 15);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"li\")(5, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function NavComponent_ng_container_21_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.logout());\n    });\n    i0.ɵɵtext(6, \"Logout\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" Hi \", ctx_r0.currentUser, \"... \");\n  }\n}\nfunction NavComponent_ng_container_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"li\", 17)(2, \"button\", 18);\n    i0.ɵɵtext(3, \"Login\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n}\nexport class NavComponent {\n  constructor(router, formBuilder, loginService, tokenservice) {\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.loginService = loginService;\n    this.tokenservice = tokenservice;\n    this.currentUser = '';\n    this.isLoading = false;\n  }\n  ngOnInit() {\n    this.loginService.unAuthorisedError.subscribe(() => {\n      this.currentUser = this.tokenservice.getname();\n      console.log(this.currentUser);\n    });\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  isLoggedIn() {\n    return this.tokenservice.getToken() != null;\n  }\n  logout() {\n    this.tokenservice.setToken(null);\n    this.currentUser = '';\n    this.router.navigate(['']);\n  }\n}\nNavComponent.ɵfac = function NavComponent_Factory(t) {\n  return new (t || NavComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ApiService), i0.ɵɵdirectiveInject(i4.TokenService));\n};\nNavComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NavComponent,\n  selectors: [[\"app-nav\"]],\n  decls: 23,\n  vars: 2,\n  consts: [[1, \"navbar\", \"navbar-expand-lg\", \"navbar-dark\", \"bg-dark\"], [\"href\", \"#\", 1, \"navbar-brand\"], [\"type\", \"button\", \"data-toggle\", \"collapse\", \"data-target\", \"#navbarNav\", \"aria-controls\", \"navbarNav\", \"aria-expanded\", \"false\", \"aria-label\", \"Toggle navigation\", 1, \"navbar-toggler\"], [1, \"navbar-toggler-icon\"], [\"id\", \"navbarNav\", 1, \"collapse\", \"navbar-collapse\"], [1, \"navbar-nav\", \"me-auto\", \"mb-2\", \"mb-lg-0\"], [1, \"nav-item\", \"active\"], [\"routerLink\", \"/\", 1, \"nav-link\"], [1, \"nav-item\", \"dropdown\"], [\"href\", \"#\", \"role\", \"button\", \"data-bs-toggle\", \"dropdown\", \"id\", \"navbarDropdown\", \"aria-expanded\", \"false\", 1, \"nav-link\", \"dropdown-toggle\"], [\"area-labelledby\", \"navbarDropdown\", 1, \"dropdown-menu\"], [\"routerLink\", \"/new-application\", 1, \"dropdown-item\"], [\"routerLink\", \"/application-request\", 1, \"dropdown-item\"], [1, \"navbar-nav\", \"mnavbar-right\", 2, \"margin-right\", \"2vw\"], [4, \"ngIf\"], [\"href\", \"#\", \"id\", \"navbarDropdown\", \"role\", \"button\", \"aria-expanded\", \"false\", 1, \"nav-link\"], [\"href\", \"#\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"nav-item\"], [\"routerLink\", \"/login\", 1, \"btn\", \"btn-primary\"]],\n  template: function NavComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"nav\", 0)(1, \"a\", 1);\n      i0.ɵɵtext(2, \"RideSharingPlatform\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"button\", 2);\n      i0.ɵɵelement(4, \"span\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"ul\", 5)(7, \"li\", 6)(8, \"a\", 7);\n      i0.ɵɵtext(9, \"Home\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"li\", 8)(11, \"a\", 9);\n      i0.ɵɵtext(12, \" User Verification \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"ul\", 10)(14, \"li\")(15, \"a\", 11);\n      i0.ɵɵtext(16, \"New User Application\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(17, \"li\")(18, \"a\", 12);\n      i0.ɵɵtext(19, \"Pending Application Requests\");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelementStart(20, \"ul\", 13);\n      i0.ɵɵtemplate(21, NavComponent_ng_container_21_Template, 7, 1, \"ng-container\", 14);\n      i0.ɵɵtemplate(22, NavComponent_ng_container_22_Template, 4, 0, \"ng-container\", 14);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(21);\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoggedIn());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isLoggedIn());\n    }\n  },\n  dependencies: [i5.NgIf, i1.RouterLink],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nNavComponent.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NavComponent,\n  factory: NavComponent.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;;;ICoB3DC,6BAAmC;IACjCA,6BAA8B;IAGzBA,YACH;IAAAA,iBAAI;IAEFA,0BAAI;IAAgCA;MAAAA;MAAA;MAAA,OAASA,8BAAQ;IAAA,EAAC;IAAUA,sBAAM;IAAAA,iBAAS;IAGrFA,0BAAe;;;;IANRA,eACH;IADGA,yDACH;;;;;IAMJA,6BAAoC;IACpCA,8BAAqB;IACiCA,qBAAK;IAAAA,iBAAS;IAEtEA,0BAAe;;;ADtBrB,OAAM,MAAOC,YAAY;EAOvBC,YAAoBC,MAAc,EAASC,WAAwB,EAAUC,YAAwB,EAASC,YAA0B;IAApH,WAAM,GAANH,MAAM;IAAiB,gBAAW,GAAXC,WAAW;IAAuB,iBAAY,GAAZC,YAAY;IAAqB,iBAAY,GAAZC,YAAY;IAJ1H,gBAAW,GAAW,EAAE;IACxB,cAAS,GAAC,KAAK;EAG6H;EAE5IC,QAAQ;IACN,IAAI,CAACF,YAAY,CAACG,iBAAiB,CAACC,SAAS,CAAC,MAAI;MAChD,IAAI,CAACC,WAAW,GAAC,IAAI,CAACJ,YAAY,CAACK,OAAO,EAAE;MAC5CC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,WAAW,CAAC;IAE/B,CAAC,CAAC;IACF,IAAI,CAACI,SAAS,GAAG,IAAI,CAACV,WAAW,CAACW,KAAK,CAAC;MACtCC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACjB,UAAU,CAACkB,QAAQ,EAAElB,UAAU,CAACiB,KAAK,CAAC,CAAC;MACpDE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACnB,UAAU,CAACkB,QAAQ,EAAElB,UAAU,CAACoB,SAAS,CAAC,CAAC,CAAC,CAAC;KAC9D,CAAC;EACJ;EAEAC,UAAU;IACR,OAAO,IAAI,CAACd,YAAY,CAACe,QAAQ,EAAE,IAAI,IAAI;EAC7C;EACAC,MAAM;IACJ,IAAI,CAAChB,YAAY,CAACiB,QAAQ,CAAC,IAAI,CAAC;IAChC,IAAI,CAACb,WAAW,GAAG,EAAE;IACrB,IAAI,CAACP,MAAM,CAACqB,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;EAC5B;;AA5BWvB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAAwB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCdzB7B,8BAAyD;MACpBA,mCAAmB;MAAAA,iBAAI;MACxDA,iCAA4K;MAC1KA,0BAAyC;MAC3CA,iBAAS;MACTA,8BAAqD;MAGZA,oBAAI;MAAAA,iBAAI;MAE7CA,8BAA8B;MAE1BA,oCACF;MAAAA,iBAAI;MACJA,+BAA2D;MACEA,qCAAoB;MAAAA,iBAAI;MACnFA,2BAAI;MAA2DA,6CAA4B;MAAAA,iBAAI;MAIrGA,+BAAgE;MAC9DA,kFAUe;MACfA,kFAIa;MACfA,iBAAK;;;MAhBYA,gBAAkB;MAAlBA,uCAAkB;MAWlBA,eAAmB;MAAnBA,wCAAmB;;;;;;ADlB7BC,YAAY;SAAZA,YAAY;EAAA6B,SAAZ7B,YAAY;EAAA8B,YAPX;AAAM","names":["Validators","i0","NavComponent","constructor","router","formBuilder","loginService","tokenservice","ngOnInit","unAuthorisedError","subscribe","currentUser","getname","console","log","loginForm","group","email","required","password","minLength","isLoggedIn","getToken","logout","setToken","navigate","selectors","decls","vars","consts","template","factory","providedIn"],"sourceRoot":"","sources":["C:\\RideSharingPlatform\\RideSharingPlatform-main\\Frontend\\ridesharingplatform\\src\\app\\nav\\nav.component.ts","C:\\RideSharingPlatform\\RideSharingPlatform-main\\Frontend\\ridesharingplatform\\src\\app\\nav\\nav.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ApiService } from '../UserVerification/api.service';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { TokenService } from '../app.tokenservice';\nimport { Router } from '@angular/router';\n@Injectable({\n  providedIn: 'root'\n})\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.scss']\n})\nexport class NavComponent implements OnInit{\n  loginForm: FormGroup;\n  errorMessage: string;\n  currentUser: string = '';\n  isLoading=false;\n  currentuserrole:string;\n\n  constructor(private router: Router,private formBuilder: FormBuilder, private loginService: ApiService,private tokenservice: TokenService) { }\n\n  ngOnInit() {\n    this.loginService.unAuthorisedError.subscribe(()=>{\n      this.currentUser=this.tokenservice.getname();\n      console.log(this.currentUser);\n      \n    })\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  isLoggedIn(): boolean {\n    return this.tokenservice.getToken() != null;\n  }\n  logout(): void {\n    this.tokenservice.setToken(null);\n    this.currentUser = '';\n    this.router.navigate([''])\n  }\n  // onSubmit() {\n  //   this.isLoading=true;\n  //   const email = this.loginForm.controls['email'].value;\n  //   const password = this.loginForm.controls['password'].value;\n  //   this.loginService.login(email, password).subscribe(\n  //     response => {\n  //       // localStorage.setItem('token', response.token);\n  //       // localStorage.setItem('username', response.name);\n  //       // close the modal on successful login\n  //       console.log(response.token);\n  //       this.tokenservice.setname(response.name);\n  //       this.tokenservice.setToken(response.token);\n  //       this.tokenservice.setRole(response.role;\n  //       this.currentUser=this.tokenservice.getname();\n  //       document.getElementById('closeModal').click();\n  //       this.isLoading=false;\n  //     },\n  //     error => {\n  //       this.errorMessage = error.message;\n  //       console.log(error);\n  //       this.isLoading=false;\n  //     }\n  //   );\n  }\n\n\n\n","<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n    <a class=\"navbar-brand\" href=\"#\">RideSharingPlatform</a>\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n      <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li class=\"nav-item active\">\n          <a class=\"nav-link\" routerLink=\"/\">Home</a>\n        </li>\n        <li class=\"nav-item dropdown\">\n          <a class=\"nav-link dropdown-toggle\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\" id=\"navbarDropdown\" aria-expanded=\"false\">\n            User Verification\n          </a>\n          <ul class=\"dropdown-menu\" area-labelledby=\"navbarDropdown\">\n            <li><a class=\"dropdown-item\" routerLink=\"/new-application\">New User Application</a></li>\n            <li><a class=\"dropdown-item\" routerLink=\"/application-request\">Pending Application Requests</a></li>\n          </ul>\n        </li>\n      </ul>\n      <ul class=\"navbar-nav mnavbar-right\" style=\"margin-right: 2vw;\">\n        <ng-container *ngIf=\"isLoggedIn()\">\n          <li class=\"nav-item dropdown\">\n            <a class=\"nav-link \" href=\"#\" id=\"navbarDropdown\" role=\"button\" \n              aria-expanded=\"false\">\n               Hi {{ currentUser }}...\n            </a>\n            \n              <li><button class=\"btn btn-primary\" (click)=\"logout()\" href=\"#\">Logout</button></li>\n            \n          \n        </ng-container>\n        <ng-container *ngIf=\"!isLoggedIn()\">\n        <li class=\"nav-item\">\n          <button class=\"btn btn-primary\" routerLink=\"/login\">Login</button>\n        </li>\n      </ng-container>\n      </ul>\n    </div>\n  </nav>\n  <!-- <div class=\"modal fade\" id=\"loginModal\" tabindex=\"-1\" aria-labelledby=\"loginModalLabel\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h5 class=\"modal-title\" id=\"loginModalLabel\">Login</h5>\n          <button type=\"button\" id=\"closeModal\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n        </div>\n        <div class=\"modal-body\">\n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"mb-3\">\n              <label for=\"emailInput\" class=\"form-label\">Email address</label>\n              <input type=\"email\" class=\"form-control\" id=\"emailInput\" formControlName=\"email\" placeholder=\"Enter email\" required>\n            </div>\n            <div class=\"mb-3\">\n              <label for=\"passwordInput\" class=\"form-label\">Password</label>\n              <input type=\"password\" class=\"form-control\" id=\"passwordInput\" formControlName=\"password\" placeholder=\"Password\"  required>\n            </div>\n            <div *ngIf=\"errorMessage\" class=\"text-danger\">{{ errorMessage }}</div>\n\n            <button type=\"submit\" [disabled]=\"isLoading\" class=\"btn btn-primary\">\n              <span *ngIf=\"isLoading\"  class=\"spinner-border spinner-border-sm mr-1\"></span>   Login</button>\n            \n          </form>\n        </div>\n      </div>\n    </div>\n  </div> -->\n  \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}