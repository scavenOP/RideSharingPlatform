{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/app.tokenservice\";\nexport let VehicleApiService = /*#__PURE__*/(() => {\n  class VehicleApiService {\n    constructor(http, tokenservice) {\n      this.http = http;\n      this.tokenservice = tokenservice;\n      this.apiUrl = 'https://ridesharingapi.azurewebsites.net/api';\n      this.unAuthorisedError = new EventEmitter();\n      this.token = this.tokenservice.getToken();\n    }\n    getVehicleTypes() {\n      this.token = this.tokenservice.getToken();\n      console.log(\"ht \" + this.token);\n      const headers = new HttpHeaders({\n        Authorization: 'Bearer ' + this.token\n      });\n      return this.http.get(`${this.apiUrl}/vehicles/vehicletypes`, {\n        headers\n      }).pipe(catchError(this.handleError));\n    }\n    createVehicle(applicationData) {\n      this.token = this.tokenservice.getToken();\n      console.log(\"ht \" + this.token);\n      const headers = new HttpHeaders({\n        Authorization: 'Bearer ' + this.token\n      });\n      return this.http.post(`${this.apiUrl}/vehicles/add/vehicle`, applicationData, {\n        headers\n      }).pipe(catchError(this.handleError));\n    }\n    getVehiclebuUser(id) {\n      return this.http.get(`${this.apiUrl}/vehicle/${id}`).pipe(catchError(error => {\n        return throwError(() => new Error(error));\n      }));\n    }\n    getPendingVehicles() {\n      this.token = this.tokenservice.getToken();\n      console.log(\"ht \" + this.token);\n      const headers = new HttpHeaders({\n        Authorization: 'Bearer ' + this.token\n      });\n      return this.http.get(`${this.apiUrl}/vehicle/pendingvehicles`, {\n        headers\n      }).pipe(catchError(this.handleError));\n    }\n    updatevehicle(updatedata) {\n      this.token = this.tokenservice.getToken();\n      console.log(\"ht \" + this.token);\n      const headers = new HttpHeaders({\n        Authorization: 'Bearer ' + this.token\n      });\n      return this.http.put(`${this.apiUrl}/vehicles/approveorreject`, updatedata, {\n        headers\n      }).pipe(catchError(this.handleError));\n    }\n    deleteVehicle(regno) {\n      this.token = this.tokenservice.getToken();\n      console.log(\"ht \" + this.token);\n      const headers = new HttpHeaders({\n        Authorization: 'Bearer ' + this.token\n      });\n      return this.http.delete(`${this.apiUrl}/vehicles/delete/${regno}`, {\n        headers\n      }).pipe(catchError(error => {\n        return throwError(() => new Error(error));\n      }));\n    }\n    handleError(error) {\n      let errorMessage = 'An error occurred';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side errors\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Server-side errors\n        console.log(error);\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error}`;\n      }\n      if (error.status === 401) {\n        this.unAuthorisedError.emit();\n      }\n      console.error(errorMessage);\n      return throwError(error);\n    }\n  }\n  VehicleApiService.ɵfac = function VehicleApiService_Factory(t) {\n    return new (t || VehicleApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokenService));\n  };\n  VehicleApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VehicleApiService,\n    factory: VehicleApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return VehicleApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}