{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/app.tokenservice\";\nexport class VehicleApiService {\n  constructor(http, tokenservice) {\n    this.http = http;\n    this.tokenservice = tokenservice;\n    this.apiUrl = 'https://ridesharingapi.azurewebsites.net/api';\n    this.unAuthorisedError = new EventEmitter();\n    this.token = this.tokenservice.getToken();\n  }\n  getVehicleTypes() {\n    return this.http.get(`${this.apiUrl}/vehicles/vehicletypes`).pipe(catchError(this.handleError));\n  }\n  createVehicle(applicationData) {\n    return this.http.post(`${this.apiUrl}/vehicles/add/vehicle`, applicationData).pipe(catchError(this.handleError));\n  }\n  getVehiclebuUser(id) {\n    return this.http.get(`${this.apiUrl}/vehicle/${id}`).pipe(catchError(error => {\n      return throwError(() => new Error(error));\n    }));\n  }\n  deleteVehicle(regno) {\n    this.token = this.tokenservice.getToken();\n    console.log(\"ht \" + this.token);\n    const headers = new HttpHeaders({\n      Authorization: 'Bearer ' + this.token\n    });\n    return this.http.delete(`${this.apiUrl}/vehicles/delete/${regno}`, {\n      headers\n    }).pipe(catchError(error => {\n      return throwError(() => new Error(error));\n    }));\n  }\n  handleError(error) {\n    let errorMessage = 'An error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side errors\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side errors\n      console.log(error);\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error}`;\n    }\n    if (error.status === 401) {\n      this.unAuthorisedError.emit();\n    }\n    console.error(errorMessage);\n    return throwError(error);\n  }\n}\nVehicleApiService.ɵfac = function VehicleApiService_Factory(t) {\n  return new (t || VehicleApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokenService));\n};\nVehicleApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: VehicleApiService,\n  factory: VehicleApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAASA,YAAY,QAAoB,eAAe;AACxD,SAAwCC,WAAW,QAAQ,sBAAsB;AACjF,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAY,gBAAgB;;;;AAQ/C,OAAM,MAAOC,iBAAiB;EAK5BC,YAAoBC,IAAgB,EAAWC,YAA0B;IAArD,SAAI,GAAJD,IAAI;IAAuB,iBAAY,GAAZC,YAAY;IAJnD,WAAM,GAAG,8CAA8C;IACxD,sBAAiB,GAAG,IAAIP,YAAY,EAAQ;IAC3C,UAAK,GAAC,IAAI,CAACO,YAAY,CAACC,QAAQ,EAAE;EAEkC;EAE5EC,eAAe;IACb,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAM,GAAG,IAAI,CAACC,MAAM,wBAAwB,CAAC,CAC9DC,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAC7B;EACL;EAEAC,aAAa,CAACC,eAAoB;IAChC,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAM,GAAG,IAAI,CAACL,MAAM,uBAAuB,EAAEI,eAAe,CAAC,CAC/EH,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAC7B;EACL;EAEAI,gBAAgB,CAACC,EAAS;IACxB,OAAO,IAAI,CAACZ,IAAI,CAACI,GAAG,CAAM,GAAG,IAAI,CAACC,MAAM,YAAYO,EAAE,EAAE,CAAC,CACtDN,IAAI,CACHT,UAAU,CAAEgB,KAAK,IAAI;MACrB,OAAOjB,UAAU,CAAC,MAAK,IAAIkB,KAAK,CAACD,KAAK,CAAC,CAAC;IAAC,CAAC,CAAC,CAC5C;EACL;EAEAE,aAAa,CAACC,KAAY;IAExB,IAAI,CAACC,KAAK,GAAC,IAAI,CAAChB,YAAY,CAACC,QAAQ,EAAE;IACvCgB,OAAO,CAACC,GAAG,CAAC,KAAK,GAAE,IAAI,CAACF,KAAK,CAAC;IAC9B,MAAMG,OAAO,GAAC,IAAIzB,WAAW,CAAC;MAAC0B,aAAa,EAAE,SAAS,GAAC,IAAI,CAACJ;IAAK,CAAC,CAAC;IAEpE,OAAO,IAAI,CAACjB,IAAI,CAACsB,MAAM,CAAC,GAAG,IAAI,CAACjB,MAAM,oBAAoBW,KAAK,EAAE,EAAC;MAACI;IAAO,CAAC,CAAC,CAC3Ed,IAAI,CACHT,UAAU,CAAEgB,KAAK,IAAI;MACnB,OAAOjB,UAAU,CAAC,MAAK,IAAIkB,KAAK,CAACD,KAAK,CAAC,CAAC;IAC1C,CAAC,CAAC,CACH;EACH;EAIQN,WAAW,CAACM,KAAwB;IAC1C,IAAIU,YAAY,GAAG,mBAAmB;IACtC,IAAIV,KAAK,CAACA,KAAK,YAAYW,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,UAAUV,KAAK,CAACA,KAAK,CAACY,OAAO,EAAE;KAC/C,MAAM;MACL;MAEAP,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;MAClBU,YAAY,GAAG,eAAeV,KAAK,CAACa,MAAM,cAAcb,KAAK,EAAE;;IAEjE,IAAGA,KAAK,CAACa,MAAM,KAAG,GAAG,EAAC;MACpB,IAAI,CAACC,iBAAiB,CAACC,IAAI,EAAE;;IAE/BV,OAAO,CAACL,KAAK,CAACU,YAAY,CAAC;IAC3B,OAAO3B,UAAU,CAACiB,KAAK,CAAC;EAC1B;;AA7DWf,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAA+B,SAAjB/B,iBAAiB;EAAAgC,YAFhB;AAAM","names":["EventEmitter","HttpHeaders","throwError","catchError","VehicleApiService","constructor","http","tokenservice","getToken","getVehicleTypes","get","apiUrl","pipe","handleError","createVehicle","applicationData","post","getVehiclebuUser","id","error","Error","deleteVehicle","regno","token","console","log","headers","Authorization","delete","errorMessage","ErrorEvent","message","status","unAuthorisedError","emit","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\acer pc\\Documents\\GitHub\\RideSharingPlatform\\Frontend\\ridesharingplatform\\src\\app\\VehicleManagement\\addvehicle\\api.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError,map } from 'rxjs/operators';\r\nimport { TokenService } from 'src/app/app.tokenservice';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VehicleApiService {\r\n  private apiUrl = 'https://ridesharingapi.azurewebsites.net/api'; \r\n  public unAuthorisedError = new EventEmitter<void>();\r\n  private token=this.tokenservice.getToken();\r\n\r\n  constructor(private http: HttpClient , private tokenservice: TokenService) {}\r\n\r\n  getVehicleTypes(): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/vehicles/vehicletypes`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  createVehicle(applicationData: any): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/vehicles/add/vehicle`, applicationData)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getVehiclebuUser(id:string): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/vehicle/${id}`)\r\n      .pipe(\r\n        catchError((error) =>{\r\n        return throwError(()=> new Error(error));})\r\n      );\r\n  }\r\n\r\n  deleteVehicle(regno:string):Observable<any>{\r\n\r\n    this.token=this.tokenservice.getToken();\r\n    console.log(\"ht \" +this.token);\r\n    const headers=new HttpHeaders({Authorization: 'Bearer '+this.token});\r\n\r\n    return this.http.delete(`${this.apiUrl}/vehicles/delete/${regno}`,{headers})\r\n    .pipe(\r\n      catchError((error) =>{\r\n        return throwError(()=> new Error(error));\r\n      })\r\n    )\r\n  }\r\n\r\n\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    let errorMessage = 'An error occurred';\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side errors\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      // Server-side errors\r\n\r\n      console.log(error);\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error}`;\r\n    }\r\n    if(error.status===401){\r\n      this.unAuthorisedError.emit();\r\n    }\r\n    console.error(errorMessage);\r\n    return throwError(error);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}